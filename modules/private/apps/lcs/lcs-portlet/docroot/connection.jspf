<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
String lcsClusterEntryLayoutURL = StringPool.BLANK;
String lcsClusterNodeLayoutURL = StringPool.BLANK;
String lcsProjectLayoutURL = StringPool.BLANK;

LCSClusterEntry lcsClusterEntry = null;
LCSClusterNode lcsClusterNode = null;
LCSProject lcsProject = new LCSProjectImpl();

try {
	lcsClusterNode = LCSClusterNodeServiceUtil.fetchLCSClusterNode(KeyGeneratorUtil.getKey());

	if (lcsClusterNode != null) {
		lcsClusterEntry = LCSClusterEntryServiceUtil.getLCSClusterEntry(lcsClusterNode.getLcsClusterEntryId());

		List<LCSProject> lcsProjects = LCSProjectServiceUtil.getUserManageableLCSProjects(liferayPortletRequest);

		for (LCSProject currentLCSProject : lcsProjects) {
			if (currentLCSProject.getLcsProjectId() == lcsClusterEntry.getLcsProjectId()) {
				lcsProject = currentLCSProject;

				break;
			}
		}

		lcsProjectLayoutURL = LCSUtil.getLCSProjectLayoutURL(lcsProject);

		lcsClusterEntryLayoutURL = LCSUtil.getLCSClusterEntryLayoutURL(lcsProject, lcsClusterNode);

		lcsClusterNodeLayoutURL = LCSUtil.getLCSClusterNodeLayoutURL(lcsProject, lcsClusterNode);
	}
}
catch (Exception e) {
	LCSExceptionHandler.error(e);

	SessionErrors.add(liferayPortletRequest, "generalPluginAccess");
}

Set<LCSAlert> lcsClusterEntryTokenAlerts = LCSUtil.getLCSClusterEntryTokenAlerts();
%>

<c:choose>
	<c:when test="<%= ((lcsClusterNode == null) || (lcsClusterEntry == null)) %>">
		<c:choose>
			<c:when test='<%= SessionErrors.contains(liferayPortletRequest, "generalPluginAccess") %>'>
				<div class="alert alert-warning lcs-alert">
					<liferay-ui:message key="an-error-occurred-while-accessing-liferay-connected-services" />
				</div>
			</c:when>
			<c:otherwise>
				<div class="alert alert-warning lcs-alert">
					<liferay-ui:message arguments="<%= LCSUtil.getLCSPortalURL() %>" key="please-download-and-install-the-latest-version-of-liferay-connected-services-client" />
				</div>
			</c:otherwise>
		</c:choose>
	</c:when>
	<c:when test="<%= !lcsClusterEntryTokenAlerts.isEmpty() %>">

		<%
		for (LCSAlert lcsAlert : lcsClusterEntryTokenAlerts) {
		%>

			<div class="<%= lcsAlert.getCSSClass() %>">
				<liferay-ui:message key="<%= lcsAlert.getLabel() %>" />
			</div>

		<%
		}
		%>

	</c:when>
	<c:otherwise>

		<%
		Map<String, String> lcsConnectionMetadata = LCSConnectionManagerUtil.getLCSConnectionMetadata();
		%>

		<c:if test='<%= GetterUtil.getBoolean(lcsConnectionMetadata.get("newLCSPortletBuildNumber")) %>'>
			<div class="alert alert-warning lcs-alert">
				<liferay-ui:message arguments="<%= LCSUtil.getDownloadsLayoutURL() %>" key="please-download-and-install-the-latest-version-of-liferay-connected-services-client" />
			</div>
		</c:if>

		<%
		boolean pending = LCSConnectionManagerUtil.isPending();
		boolean ready = LCSConnectionManagerUtil.isReady();

		String connectionStatusCSSClass = "alert-success";
		String connectionStatusLabel = "connected";

		if (!ready && !pending) {
			connectionStatusCSSClass = "alert-danger";
			connectionStatusLabel = "disconnected";
		}
		else if (!ready && pending) {
			connectionStatusCSSClass = "alert-warning";
			connectionStatusLabel = "synchronizing";
		}

		String handshakeTime = lcsConnectionMetadata.get("handshakeTime");
		%>

		<div class="alert alert-connection <%= connectionStatusCSSClass %>" id="<portlet:namespace />connectionStatus">
			<strong class="lead">
				<liferay-ui:message key="<%= connectionStatusLabel %>" />
			</strong>

			<i class="icon-spin icon-spinner <%= pending ? StringPool.BLANK : "hide" %>"></i>
		</div>

		<div class="alert alert-danger lcs-alert <%= LCSConnectionManagerUtil.isLCSGatewayAvailable() ? "hide" : StringPool.BLANK %>" id="<portlet:namespace />lcsGatewayUnavailable">
			<liferay-ui:message key="unable-to-access-liferay-connected-services-gateway" />
		</div>

		<div class="alert alert-danger hide lcs-alert" id="<portlet:namespace />heartbeatExpired">
			<liferay-ui:message key="the-connection-to-liferay-connected-services-has-expired" />
		</div>

		<ul class="list-group">
			<li class="list-group-heading">
				<liferay-ui:message key="connection" />
			</li>

			<li class="list-group-item">
				<aui:row>
					<aui:col width="<%= 50 %>">
						<liferay-ui:message key="heartbeat-interval" />

						<liferay-ui:icon-help message="heartbeat-interval-help" />
					</aui:col>

					<aui:col width="<%= 50 %>">

						<%
						Date heartbeatIntervalDate = new Date(GetterUtil.getLong(lcsConnectionMetadata.get("heartbeatInterval")));
						%>

						<%= intervalDateFormatDate.format(heartbeatIntervalDate) %>
					</aui:col>
				</aui:row>
			</li>

			<li class="list-group-item">
				<aui:row>
					<aui:col width="<%= 50 %>">
						<liferay-ui:message key="message-task-interval" />

						<liferay-ui:icon-help message="message-task-interval-help" />
					</aui:col>

					<aui:col width="<%= 50 %>">

						<%
						Date messageTaskIntervalDate = new Date(GetterUtil.getLong(lcsConnectionMetadata.get("messageTaskInterval")));
						%>

						<%= intervalDateFormatDate.format(messageTaskIntervalDate) %>
					</aui:col>
				</aui:row>
			</li>

			<li class="list-group-item">
				<aui:row>
					<aui:col width="<%= 50 %>">
						<liferay-ui:message key="metrics-task-interval" />

						<liferay-ui:icon-help message="metrics-task-interval-help" />
					</aui:col>

					<aui:col width="<%= 50 %>">

						<%
						Date jvmMetricsTaskIntervalDate = new Date(GetterUtil.getLong(lcsConnectionMetadata.get("jvmMetricsTaskInterval")));
						%>

						<%= intervalDateFormatDate.format(jvmMetricsTaskIntervalDate) %>
					</aui:col>
				</aui:row>
			</li>

			<c:if test='<%= lcsConnectionMetadata.get("messageTaskTime") != null %>'>
				<li class="list-group-item">
					<aui:row>
						<aui:col width="<%= 50 %>">
							<liferay-ui:message key="last-message-received" />

							<liferay-ui:icon-help message="last-message-received-help" />
						</aui:col>

						<aui:col width="<%= 50 %>">

							<%
							Date messageTaskTimeDate = new Date(GetterUtil.getLong(lcsConnectionMetadata.get("messageTaskTime")));
							%>

							<%= dateFormatDate.format(messageTaskTimeDate) %>
						</aui:col>
					</aui:row>
				</li>
			</c:if>

			<li class="list-group-item">
				<aui:row>
					<aui:col width="<%= 50 %>">
						<liferay-ui:message key="connection-uptime" />

						<liferay-ui:icon-help message="connection-uptime-help" />
					</aui:col>

					<aui:col width="<%= 50 %>">
						<div id="<portlet:namespace />duration">
							<c:choose>
								<c:when test="<%= ready && !pending && (handshakeTime != null) %>">

									<%
									Date handshakeTimeDate = new Date(System.currentTimeMillis() - GetterUtil.getLong(handshakeTime));
									%>

									<%= intervalDateFormatDate.format(handshakeTimeDate) %>
								</c:when>
								<c:otherwise>
									<%= intervalDateFormatDate.format(new Date(0)) %>
								</c:otherwise>
							</c:choose>
						</div>
					</aui:col>
				</aui:row>
			</li>
		</ul>

		<ul class="list-group">
			<li class="list-group-heading">
				<liferay-ui:message key="liferay-connected-services-sites" />
			</li>

			<li class="list-group-item">
				<aui:row>
					<aui:col width="<%= 50 %>">
						<liferay-ui:message key="project-home" />
					</aui:col>

					<aui:col width="<%= 50 %>">
						<aui:a href="<%= lcsProjectLayoutURL %>" target="_blank">
							<%= HtmlUtil.escape(lcsProject.getName()) %>
						</aui:a>
					</aui:col>
				</aui:row>
			</li>

			<li class="list-group-item">
				<aui:row>
					<aui:col width="<%= 50 %>">
						<liferay-ui:message key="environment" />
					</aui:col>

					<aui:col width="<%= 50 %>">
						<aui:a href="<%= lcsClusterEntryLayoutURL %>" target="_blank">
							<%= HtmlUtil.escape(lcsClusterEntry.getName()) %>
						</aui:a>
					</aui:col>
				</aui:row>
			</li>

			<li class="list-group-item">
				<aui:row>
					<aui:col width="<%= 50 %>">
						<liferay-ui:message key="server-dashboard" />
					</aui:col>

					<aui:col width="<%= 50 %>">
						<aui:a href="<%= lcsClusterNodeLayoutURL %>" target="_blank">
							<%= HtmlUtil.escape(lcsClusterNode.getName()) %>
						</aui:a>
					</aui:col>
				</aui:row>
			</li>
		</ul>

		<c:if test="<%= ClusterExecutorUtil.isEnabled() %>">
			<ul class="list-group">
				<li class="list-group-heading">
					<liferay-ui:message key="cluster" />
				</li>

				<li class="list-group-item">
					<aui:row>
						<aui:col width="<%= 50 %>">
							<liferay-ui:message key="local-cluster-node-key" />
						</aui:col>

						<aui:col width="<%= 50 %>">

							<%
							Map<String, Object> localClusterNodeInfo = ClusterNodeUtil.getClusterNodeInfo();
							%>

							<%= localClusterNodeInfo.get("key") %>
						</aui:col>
					</aui:row>

					<%
					List<Map<String, Object>> clusterNodeInfos = ClusterNodeUtil.getClusterNodeInfos();
					%>

					<c:if test="<%= !clusterNodeInfos.isEmpty() %>">
						<aui:row>
							<aui:col width="<%= 50 %>">
								<liferay-ui:message key="sibling-cluster-nodes-keys" />
							</aui:col>

							<aui:col width="<%= 50 %>">

								<%
								for (Map<String, Object> clusterNodeInfo : ClusterNodeUtil.getClusterNodeInfos()) {
								%>

									<c:choose>
										<c:when test='<%= clusterNodeInfo.containsKey("lcsPortletMissing") %>'>
											<div class="cluster-node-error">
												<%= clusterNodeInfo.get("key") %>

												<i class="icon-warning-sign"></i>
											</div>
										</c:when>
										<c:otherwise>
											<%= clusterNodeInfo.get("key") %>
										</c:otherwise>
									</c:choose>

								<%
								}
								%>

							</aui:col>
						</aui:row>
					</c:if>
				</li>
			</ul>

			<div class="<%= ClusterExecutorUtil.isEnabled() ? StringPool.BLANK : "hide" %>">
				<aui:input checked="<%= true %>" id="applyToSiblingClusterNodes" label="when-connecting-or-disconnecting-this-node-connect-or-disconnect-all-nodes-in-the-cluster" name="applyToSiblingClusterNodes" type="checkbox" />
			</div>
		</c:if>

		<aui:button-row>
			<aui:button cssClass='<%= "btn-primary " + (ready ? "hide" : StringPool.BLANK) %>' disabled="<%= pending %>" name="connect" value="connect" />

			<aui:button cssClass='<%= ready ? StringPool.BLANK : "hide" %>' disabled="<%= pending %>" name="disconnect" value="disconnect" />
		</aui:button-row>

		<aui:script use="lcs">
			var lcsPortlet = new Liferay.Portlet.LCS(
				{
					namespace: '<portlet:namespace />'
				}
			);

			lcsPortlet.initializeConnectionPage(
				{
					cluster: <%= ClusterExecutorUtil.isEnabled() %>,
					connectionStatusURL: '<portlet:resourceURL id="serveConnectionStatus" />',
					connectURL: '<portlet:resourceURL id="connect" />',
					disconnectURL: '<portlet:resourceURL id="disconnect" />',
					handshakeTime: <%= handshakeTime %>,
					labels: {
						clusterNodeError: '<%= UnicodeLanguageUtil.get(request, "this-cluster-node-does-not-have-liferay-connected-services-client-installed") %>',
						connected: '<%= UnicodeLanguageUtil.get(request, "connected") %>',
						disconnected: '<%= UnicodeLanguageUtil.get(request, "disconnected") %>',
						pending: '<%= UnicodeLanguageUtil.get(request, "synchronizing") %>'
					},
					pending: <%= pending %>,
					ready: <%= ready %>
				}
			);
		</aui:script>
	</c:otherwise>
</c:choose>