/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osb.ldn.github.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.osb.ldn.github.model.GitHubContributor;
import com.liferay.osb.ldn.github.service.GitHubContributorLocalService;
import com.liferay.osb.ldn.github.service.persistence.GitHubContributorPersistence;
import com.liferay.osb.ldn.github.service.persistence.GitHubRepositoryPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the git hub contributor local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.osb.ldn.github.service.impl.GitHubContributorLocalServiceImpl}.
 * </p>
 *
 * @author Howie Chou
 * @see com.liferay.osb.ldn.github.service.impl.GitHubContributorLocalServiceImpl
 * @see com.liferay.osb.ldn.github.service.GitHubContributorLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class GitHubContributorLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements GitHubContributorLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.osb.ldn.github.service.GitHubContributorLocalServiceUtil} to access the git hub contributor local service.
	 */

	/**
	 * Adds the git hub contributor to the database. Also notifies the appropriate model listeners.
	 *
	 * @param gitHubContributor the git hub contributor
	 * @return the git hub contributor that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public GitHubContributor addGitHubContributor(
		GitHubContributor gitHubContributor) {
		gitHubContributor.setNew(true);

		return gitHubContributorPersistence.update(gitHubContributor);
	}

	/**
	 * Creates a new git hub contributor with the primary key. Does not add the git hub contributor to the database.
	 *
	 * @param gitHubContributorId the primary key for the new git hub contributor
	 * @return the new git hub contributor
	 */
	@Override
	public GitHubContributor createGitHubContributor(long gitHubContributorId) {
		return gitHubContributorPersistence.create(gitHubContributorId);
	}

	/**
	 * Deletes the git hub contributor with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param gitHubContributorId the primary key of the git hub contributor
	 * @return the git hub contributor that was removed
	 * @throws PortalException if a git hub contributor with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public GitHubContributor deleteGitHubContributor(long gitHubContributorId)
		throws PortalException {
		return gitHubContributorPersistence.remove(gitHubContributorId);
	}

	/**
	 * Deletes the git hub contributor from the database. Also notifies the appropriate model listeners.
	 *
	 * @param gitHubContributor the git hub contributor
	 * @return the git hub contributor that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public GitHubContributor deleteGitHubContributor(
		GitHubContributor gitHubContributor) {
		return gitHubContributorPersistence.remove(gitHubContributor);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(GitHubContributor.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return gitHubContributorPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.osb.ldn.github.model.impl.GitHubContributorModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return gitHubContributorPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.osb.ldn.github.model.impl.GitHubContributorModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return gitHubContributorPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return gitHubContributorPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return gitHubContributorPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public GitHubContributor fetchGitHubContributor(long gitHubContributorId) {
		return gitHubContributorPersistence.fetchByPrimaryKey(gitHubContributorId);
	}

	/**
	 * Returns the git hub contributor with the primary key.
	 *
	 * @param gitHubContributorId the primary key of the git hub contributor
	 * @return the git hub contributor
	 * @throws PortalException if a git hub contributor with the primary key could not be found
	 */
	@Override
	public GitHubContributor getGitHubContributor(long gitHubContributorId)
		throws PortalException {
		return gitHubContributorPersistence.findByPrimaryKey(gitHubContributorId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(gitHubContributorLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(GitHubContributor.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("gitHubContributorId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(gitHubContributorLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(GitHubContributor.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"gitHubContributorId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(gitHubContributorLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(GitHubContributor.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("gitHubContributorId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return gitHubContributorLocalService.deleteGitHubContributor((GitHubContributor)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return gitHubContributorPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the git hub contributors.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.osb.ldn.github.model.impl.GitHubContributorModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of git hub contributors
	 * @param end the upper bound of the range of git hub contributors (not inclusive)
	 * @return the range of git hub contributors
	 */
	@Override
	public List<GitHubContributor> getGitHubContributors(int start, int end) {
		return gitHubContributorPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of git hub contributors.
	 *
	 * @return the number of git hub contributors
	 */
	@Override
	public int getGitHubContributorsCount() {
		return gitHubContributorPersistence.countAll();
	}

	/**
	 * Updates the git hub contributor in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param gitHubContributor the git hub contributor
	 * @return the git hub contributor that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public GitHubContributor updateGitHubContributor(
		GitHubContributor gitHubContributor) {
		return gitHubContributorPersistence.update(gitHubContributor);
	}

	/**
	 * Returns the git hub contributor local service.
	 *
	 * @return the git hub contributor local service
	 */
	public GitHubContributorLocalService getGitHubContributorLocalService() {
		return gitHubContributorLocalService;
	}

	/**
	 * Sets the git hub contributor local service.
	 *
	 * @param gitHubContributorLocalService the git hub contributor local service
	 */
	public void setGitHubContributorLocalService(
		GitHubContributorLocalService gitHubContributorLocalService) {
		this.gitHubContributorLocalService = gitHubContributorLocalService;
	}

	/**
	 * Returns the git hub contributor persistence.
	 *
	 * @return the git hub contributor persistence
	 */
	public GitHubContributorPersistence getGitHubContributorPersistence() {
		return gitHubContributorPersistence;
	}

	/**
	 * Sets the git hub contributor persistence.
	 *
	 * @param gitHubContributorPersistence the git hub contributor persistence
	 */
	public void setGitHubContributorPersistence(
		GitHubContributorPersistence gitHubContributorPersistence) {
		this.gitHubContributorPersistence = gitHubContributorPersistence;
	}

	/**
	 * Returns the git hub repository local service.
	 *
	 * @return the git hub repository local service
	 */
	public com.liferay.osb.ldn.github.service.GitHubRepositoryLocalService getGitHubRepositoryLocalService() {
		return gitHubRepositoryLocalService;
	}

	/**
	 * Sets the git hub repository local service.
	 *
	 * @param gitHubRepositoryLocalService the git hub repository local service
	 */
	public void setGitHubRepositoryLocalService(
		com.liferay.osb.ldn.github.service.GitHubRepositoryLocalService gitHubRepositoryLocalService) {
		this.gitHubRepositoryLocalService = gitHubRepositoryLocalService;
	}

	/**
	 * Returns the git hub repository persistence.
	 *
	 * @return the git hub repository persistence
	 */
	public GitHubRepositoryPersistence getGitHubRepositoryPersistence() {
		return gitHubRepositoryPersistence;
	}

	/**
	 * Sets the git hub repository persistence.
	 *
	 * @param gitHubRepositoryPersistence the git hub repository persistence
	 */
	public void setGitHubRepositoryPersistence(
		GitHubRepositoryPersistence gitHubRepositoryPersistence) {
		this.gitHubRepositoryPersistence = gitHubRepositoryPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.osb.ldn.github.model.GitHubContributor",
			gitHubContributorLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.osb.ldn.github.model.GitHubContributor");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return GitHubContributorLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return GitHubContributor.class;
	}

	protected String getModelClassName() {
		return GitHubContributor.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = gitHubContributorPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = GitHubContributorLocalService.class)
	protected GitHubContributorLocalService gitHubContributorLocalService;
	@BeanReference(type = GitHubContributorPersistence.class)
	protected GitHubContributorPersistence gitHubContributorPersistence;
	@BeanReference(type = com.liferay.osb.ldn.github.service.GitHubRepositoryLocalService.class)
	protected com.liferay.osb.ldn.github.service.GitHubRepositoryLocalService gitHubRepositoryLocalService;
	@BeanReference(type = GitHubRepositoryPersistence.class)
	protected GitHubRepositoryPersistence gitHubRepositoryPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}