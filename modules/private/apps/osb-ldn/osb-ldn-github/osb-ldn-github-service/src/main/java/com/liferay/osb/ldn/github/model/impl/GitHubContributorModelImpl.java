/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osb.ldn.github.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.osb.ldn.github.model.GitHubContributor;
import com.liferay.osb.ldn.github.model.GitHubContributorModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GitHubContributor service. Represents a row in the &quot;OSB_LDN_GitHubContributor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link GitHubContributorModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GitHubContributorImpl}.
 * </p>
 *
 * @author Howie Chou
 * @see GitHubContributorImpl
 * @see GitHubContributor
 * @see GitHubContributorModel
 * @generated
 */
@ProviderType
public class GitHubContributorModelImpl extends BaseModelImpl<GitHubContributor>
	implements GitHubContributorModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a git hub contributor model instance should use the {@link GitHubContributor} interface instead.
	 */
	public static final String TABLE_NAME = "OSB_LDN_GitHubContributor";
	public static final Object[][] TABLE_COLUMNS = {
			{ "gitHubContributorId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "gitHubRepositoryId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "avatarURL", Types.VARCHAR },
			{ "contributions", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("gitHubContributorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("gitHubRepositoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("avatarURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contributions", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table OSB_LDN_GitHubContributor (gitHubContributorId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,gitHubRepositoryId LONG,name VARCHAR(75) null,avatarURL VARCHAR(75) null,contributions INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table OSB_LDN_GitHubContributor";
	public static final String ORDER_BY_JPQL = " ORDER BY gitHubContributor.contributions DESC";
	public static final String ORDER_BY_SQL = " ORDER BY OSB_LDN_GitHubContributor.contributions DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.ldn.github.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.osb.ldn.github.model.GitHubContributor"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.ldn.github.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.osb.ldn.github.model.GitHubContributor"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.osb.ldn.github.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.osb.ldn.github.model.GitHubContributor"),
			true);
	public static final long GITHUBREPOSITORYID_COLUMN_BITMASK = 1L;
	public static final long CONTRIBUTIONS_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.osb.ldn.github.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.osb.ldn.github.model.GitHubContributor"));

	public GitHubContributorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _gitHubContributorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGitHubContributorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _gitHubContributorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GitHubContributor.class;
	}

	@Override
	public String getModelClassName() {
		return GitHubContributor.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("gitHubContributorId", getGitHubContributorId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("gitHubRepositoryId", getGitHubRepositoryId());
		attributes.put("name", getName());
		attributes.put("avatarURL", getAvatarURL());
		attributes.put("contributions", getContributions());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long gitHubContributorId = (Long)attributes.get("gitHubContributorId");

		if (gitHubContributorId != null) {
			setGitHubContributorId(gitHubContributorId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long gitHubRepositoryId = (Long)attributes.get("gitHubRepositoryId");

		if (gitHubRepositoryId != null) {
			setGitHubRepositoryId(gitHubRepositoryId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String avatarURL = (String)attributes.get("avatarURL");

		if (avatarURL != null) {
			setAvatarURL(avatarURL);
		}

		Integer contributions = (Integer)attributes.get("contributions");

		if (contributions != null) {
			setContributions(contributions);
		}
	}

	@Override
	public long getGitHubContributorId() {
		return _gitHubContributorId;
	}

	@Override
	public void setGitHubContributorId(long gitHubContributorId) {
		_gitHubContributorId = gitHubContributorId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getGitHubRepositoryId() {
		return _gitHubRepositoryId;
	}

	@Override
	public void setGitHubRepositoryId(long gitHubRepositoryId) {
		_columnBitmask |= GITHUBREPOSITORYID_COLUMN_BITMASK;

		if (!_setOriginalGitHubRepositoryId) {
			_setOriginalGitHubRepositoryId = true;

			_originalGitHubRepositoryId = _gitHubRepositoryId;
		}

		_gitHubRepositoryId = gitHubRepositoryId;
	}

	public long getOriginalGitHubRepositoryId() {
		return _originalGitHubRepositoryId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getAvatarURL() {
		if (_avatarURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _avatarURL;
		}
	}

	@Override
	public void setAvatarURL(String avatarURL) {
		_avatarURL = avatarURL;
	}

	@Override
	public int getContributions() {
		return _contributions;
	}

	@Override
	public void setContributions(int contributions) {
		_columnBitmask = -1L;

		_contributions = contributions;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			GitHubContributor.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GitHubContributor toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GitHubContributor)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GitHubContributorImpl gitHubContributorImpl = new GitHubContributorImpl();

		gitHubContributorImpl.setGitHubContributorId(getGitHubContributorId());
		gitHubContributorImpl.setCompanyId(getCompanyId());
		gitHubContributorImpl.setUserId(getUserId());
		gitHubContributorImpl.setUserName(getUserName());
		gitHubContributorImpl.setCreateDate(getCreateDate());
		gitHubContributorImpl.setModifiedDate(getModifiedDate());
		gitHubContributorImpl.setGitHubRepositoryId(getGitHubRepositoryId());
		gitHubContributorImpl.setName(getName());
		gitHubContributorImpl.setAvatarURL(getAvatarURL());
		gitHubContributorImpl.setContributions(getContributions());

		gitHubContributorImpl.resetOriginalValues();

		return gitHubContributorImpl;
	}

	@Override
	public int compareTo(GitHubContributor gitHubContributor) {
		int value = 0;

		if (getContributions() < gitHubContributor.getContributions()) {
			value = -1;
		}
		else if (getContributions() > gitHubContributor.getContributions()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GitHubContributor)) {
			return false;
		}

		GitHubContributor gitHubContributor = (GitHubContributor)obj;

		long primaryKey = gitHubContributor.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		GitHubContributorModelImpl gitHubContributorModelImpl = this;

		gitHubContributorModelImpl._setModifiedDate = false;

		gitHubContributorModelImpl._originalGitHubRepositoryId = gitHubContributorModelImpl._gitHubRepositoryId;

		gitHubContributorModelImpl._setOriginalGitHubRepositoryId = false;

		gitHubContributorModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GitHubContributor> toCacheModel() {
		GitHubContributorCacheModel gitHubContributorCacheModel = new GitHubContributorCacheModel();

		gitHubContributorCacheModel.gitHubContributorId = getGitHubContributorId();

		gitHubContributorCacheModel.companyId = getCompanyId();

		gitHubContributorCacheModel.userId = getUserId();

		gitHubContributorCacheModel.userName = getUserName();

		String userName = gitHubContributorCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			gitHubContributorCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			gitHubContributorCacheModel.createDate = createDate.getTime();
		}
		else {
			gitHubContributorCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			gitHubContributorCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			gitHubContributorCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		gitHubContributorCacheModel.gitHubRepositoryId = getGitHubRepositoryId();

		gitHubContributorCacheModel.name = getName();

		String name = gitHubContributorCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			gitHubContributorCacheModel.name = null;
		}

		gitHubContributorCacheModel.avatarURL = getAvatarURL();

		String avatarURL = gitHubContributorCacheModel.avatarURL;

		if ((avatarURL != null) && (avatarURL.length() == 0)) {
			gitHubContributorCacheModel.avatarURL = null;
		}

		gitHubContributorCacheModel.contributions = getContributions();

		return gitHubContributorCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{gitHubContributorId=");
		sb.append(getGitHubContributorId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", gitHubRepositoryId=");
		sb.append(getGitHubRepositoryId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", avatarURL=");
		sb.append(getAvatarURL());
		sb.append(", contributions=");
		sb.append(getContributions());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.liferay.osb.ldn.github.model.GitHubContributor");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>gitHubContributorId</column-name><column-value><![CDATA[");
		sb.append(getGitHubContributorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gitHubRepositoryId</column-name><column-value><![CDATA[");
		sb.append(getGitHubRepositoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>avatarURL</column-name><column-value><![CDATA[");
		sb.append(getAvatarURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contributions</column-name><column-value><![CDATA[");
		sb.append(getContributions());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = GitHubContributor.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			GitHubContributor.class
		};
	private long _gitHubContributorId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _gitHubRepositoryId;
	private long _originalGitHubRepositoryId;
	private boolean _setOriginalGitHubRepositoryId;
	private String _name;
	private String _avatarURL;
	private int _contributions;
	private long _columnBitmask;
	private GitHubContributor _escapedModel;
}