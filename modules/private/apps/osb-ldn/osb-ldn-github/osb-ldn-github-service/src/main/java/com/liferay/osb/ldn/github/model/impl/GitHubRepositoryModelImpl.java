/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osb.ldn.github.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.osb.ldn.github.model.GitHubRepository;
import com.liferay.osb.ldn.github.model.GitHubRepositoryModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GitHubRepository service. Represents a row in the &quot;OSB_LDN_GitHubRepository&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link GitHubRepositoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GitHubRepositoryImpl}.
 * </p>
 *
 * @author Howie Chou
 * @see GitHubRepositoryImpl
 * @see GitHubRepository
 * @see GitHubRepositoryModel
 * @generated
 */
@ProviderType
public class GitHubRepositoryModelImpl extends BaseModelImpl<GitHubRepository>
	implements GitHubRepositoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a git hub repository model instance should use the {@link GitHubRepository} interface instead.
	 */
	public static final String TABLE_NAME = "OSB_LDN_GitHubRepository";
	public static final Object[][] TABLE_COLUMNS = {
			{ "gitHubRepositoryId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "owner", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "commits", Types.INTEGER },
			{ "openIssues", Types.INTEGER },
			{ "stars", Types.INTEGER },
			{ "url", Types.VARCHAR },
			{ "repositoryCreateDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("gitHubRepositoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("owner", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commits", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("openIssues", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("stars", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("repositoryCreateDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table OSB_LDN_GitHubRepository (gitHubRepositoryId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,owner VARCHAR(75) null,name VARCHAR(75) null,commits INTEGER,openIssues INTEGER,stars INTEGER,url VARCHAR(75) null,repositoryCreateDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table OSB_LDN_GitHubRepository";
	public static final String ORDER_BY_JPQL = " ORDER BY gitHubRepository.gitHubRepositoryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OSB_LDN_GitHubRepository.gitHubRepositoryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.ldn.github.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.osb.ldn.github.model.GitHubRepository"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.ldn.github.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.osb.ldn.github.model.GitHubRepository"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.osb.ldn.github.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.osb.ldn.github.model.GitHubRepository"),
			true);
	public static final long NAME_COLUMN_BITMASK = 1L;
	public static final long OWNER_COLUMN_BITMASK = 2L;
	public static final long GITHUBREPOSITORYID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.osb.ldn.github.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.osb.ldn.github.model.GitHubRepository"));

	public GitHubRepositoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _gitHubRepositoryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGitHubRepositoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _gitHubRepositoryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GitHubRepository.class;
	}

	@Override
	public String getModelClassName() {
		return GitHubRepository.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("gitHubRepositoryId", getGitHubRepositoryId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("owner", getOwner());
		attributes.put("name", getName());
		attributes.put("commits", getCommits());
		attributes.put("openIssues", getOpenIssues());
		attributes.put("stars", getStars());
		attributes.put("url", getUrl());
		attributes.put("repositoryCreateDate", getRepositoryCreateDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long gitHubRepositoryId = (Long)attributes.get("gitHubRepositoryId");

		if (gitHubRepositoryId != null) {
			setGitHubRepositoryId(gitHubRepositoryId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String owner = (String)attributes.get("owner");

		if (owner != null) {
			setOwner(owner);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Integer commits = (Integer)attributes.get("commits");

		if (commits != null) {
			setCommits(commits);
		}

		Integer openIssues = (Integer)attributes.get("openIssues");

		if (openIssues != null) {
			setOpenIssues(openIssues);
		}

		Integer stars = (Integer)attributes.get("stars");

		if (stars != null) {
			setStars(stars);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		Date repositoryCreateDate = (Date)attributes.get("repositoryCreateDate");

		if (repositoryCreateDate != null) {
			setRepositoryCreateDate(repositoryCreateDate);
		}
	}

	@Override
	public long getGitHubRepositoryId() {
		return _gitHubRepositoryId;
	}

	@Override
	public void setGitHubRepositoryId(long gitHubRepositoryId) {
		_gitHubRepositoryId = gitHubRepositoryId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getOwner() {
		if (_owner == null) {
			return StringPool.BLANK;
		}
		else {
			return _owner;
		}
	}

	@Override
	public void setOwner(String owner) {
		_columnBitmask |= OWNER_COLUMN_BITMASK;

		if (_originalOwner == null) {
			_originalOwner = _owner;
		}

		_owner = owner;
	}

	public String getOriginalOwner() {
		return GetterUtil.getString(_originalOwner);
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@Override
	public int getCommits() {
		return _commits;
	}

	@Override
	public void setCommits(int commits) {
		_commits = commits;
	}

	@Override
	public int getOpenIssues() {
		return _openIssues;
	}

	@Override
	public void setOpenIssues(int openIssues) {
		_openIssues = openIssues;
	}

	@Override
	public int getStars() {
		return _stars;
	}

	@Override
	public void setStars(int stars) {
		_stars = stars;
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@Override
	public Date getRepositoryCreateDate() {
		return _repositoryCreateDate;
	}

	@Override
	public void setRepositoryCreateDate(Date repositoryCreateDate) {
		_repositoryCreateDate = repositoryCreateDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			GitHubRepository.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GitHubRepository toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GitHubRepository)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GitHubRepositoryImpl gitHubRepositoryImpl = new GitHubRepositoryImpl();

		gitHubRepositoryImpl.setGitHubRepositoryId(getGitHubRepositoryId());
		gitHubRepositoryImpl.setCompanyId(getCompanyId());
		gitHubRepositoryImpl.setUserId(getUserId());
		gitHubRepositoryImpl.setUserName(getUserName());
		gitHubRepositoryImpl.setCreateDate(getCreateDate());
		gitHubRepositoryImpl.setModifiedDate(getModifiedDate());
		gitHubRepositoryImpl.setOwner(getOwner());
		gitHubRepositoryImpl.setName(getName());
		gitHubRepositoryImpl.setCommits(getCommits());
		gitHubRepositoryImpl.setOpenIssues(getOpenIssues());
		gitHubRepositoryImpl.setStars(getStars());
		gitHubRepositoryImpl.setUrl(getUrl());
		gitHubRepositoryImpl.setRepositoryCreateDate(getRepositoryCreateDate());

		gitHubRepositoryImpl.resetOriginalValues();

		return gitHubRepositoryImpl;
	}

	@Override
	public int compareTo(GitHubRepository gitHubRepository) {
		long primaryKey = gitHubRepository.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GitHubRepository)) {
			return false;
		}

		GitHubRepository gitHubRepository = (GitHubRepository)obj;

		long primaryKey = gitHubRepository.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		GitHubRepositoryModelImpl gitHubRepositoryModelImpl = this;

		gitHubRepositoryModelImpl._setModifiedDate = false;

		gitHubRepositoryModelImpl._originalOwner = gitHubRepositoryModelImpl._owner;

		gitHubRepositoryModelImpl._originalName = gitHubRepositoryModelImpl._name;

		gitHubRepositoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GitHubRepository> toCacheModel() {
		GitHubRepositoryCacheModel gitHubRepositoryCacheModel = new GitHubRepositoryCacheModel();

		gitHubRepositoryCacheModel.gitHubRepositoryId = getGitHubRepositoryId();

		gitHubRepositoryCacheModel.companyId = getCompanyId();

		gitHubRepositoryCacheModel.userId = getUserId();

		gitHubRepositoryCacheModel.userName = getUserName();

		String userName = gitHubRepositoryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			gitHubRepositoryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			gitHubRepositoryCacheModel.createDate = createDate.getTime();
		}
		else {
			gitHubRepositoryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			gitHubRepositoryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			gitHubRepositoryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		gitHubRepositoryCacheModel.owner = getOwner();

		String owner = gitHubRepositoryCacheModel.owner;

		if ((owner != null) && (owner.length() == 0)) {
			gitHubRepositoryCacheModel.owner = null;
		}

		gitHubRepositoryCacheModel.name = getName();

		String name = gitHubRepositoryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			gitHubRepositoryCacheModel.name = null;
		}

		gitHubRepositoryCacheModel.commits = getCommits();

		gitHubRepositoryCacheModel.openIssues = getOpenIssues();

		gitHubRepositoryCacheModel.stars = getStars();

		gitHubRepositoryCacheModel.url = getUrl();

		String url = gitHubRepositoryCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			gitHubRepositoryCacheModel.url = null;
		}

		Date repositoryCreateDate = getRepositoryCreateDate();

		if (repositoryCreateDate != null) {
			gitHubRepositoryCacheModel.repositoryCreateDate = repositoryCreateDate.getTime();
		}
		else {
			gitHubRepositoryCacheModel.repositoryCreateDate = Long.MIN_VALUE;
		}

		return gitHubRepositoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{gitHubRepositoryId=");
		sb.append(getGitHubRepositoryId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", owner=");
		sb.append(getOwner());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", commits=");
		sb.append(getCommits());
		sb.append(", openIssues=");
		sb.append(getOpenIssues());
		sb.append(", stars=");
		sb.append(getStars());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", repositoryCreateDate=");
		sb.append(getRepositoryCreateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.liferay.osb.ldn.github.model.GitHubRepository");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>gitHubRepositoryId</column-name><column-value><![CDATA[");
		sb.append(getGitHubRepositoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>owner</column-name><column-value><![CDATA[");
		sb.append(getOwner());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commits</column-name><column-value><![CDATA[");
		sb.append(getCommits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>openIssues</column-name><column-value><![CDATA[");
		sb.append(getOpenIssues());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stars</column-name><column-value><![CDATA[");
		sb.append(getStars());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repositoryCreateDate</column-name><column-value><![CDATA[");
		sb.append(getRepositoryCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = GitHubRepository.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			GitHubRepository.class
		};
	private long _gitHubRepositoryId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _owner;
	private String _originalOwner;
	private String _name;
	private String _originalName;
	private int _commits;
	private int _openIssues;
	private int _stars;
	private String _url;
	private Date _repositoryCreateDate;
	private long _columnBitmask;
	private GitHubRepository _escapedModel;
}