/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osb.ldn.documentation.project.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.osb.ldn.documentation.project.model.DocumentationProject;
import com.liferay.osb.ldn.documentation.project.service.DocumentationProjectLocalService;
import com.liferay.osb.ldn.documentation.project.service.persistence.DocumentationProjectPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the documentation project local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.osb.ldn.documentation.project.service.impl.DocumentationProjectLocalServiceImpl}.
 * </p>
 *
 * @author Ryan Park
 * @see com.liferay.osb.ldn.documentation.project.service.impl.DocumentationProjectLocalServiceImpl
 * @see com.liferay.osb.ldn.documentation.project.service.DocumentationProjectLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class DocumentationProjectLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements DocumentationProjectLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.osb.ldn.documentation.project.service.DocumentationProjectLocalServiceUtil} to access the documentation project local service.
	 */

	/**
	 * Adds the documentation project to the database. Also notifies the appropriate model listeners.
	 *
	 * @param documentationProject the documentation project
	 * @return the documentation project that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DocumentationProject addDocumentationProject(
		DocumentationProject documentationProject) {
		documentationProject.setNew(true);

		return documentationProjectPersistence.update(documentationProject);
	}

	/**
	 * Creates a new documentation project with the primary key. Does not add the documentation project to the database.
	 *
	 * @param documentationProjectId the primary key for the new documentation project
	 * @return the new documentation project
	 */
	@Override
	public DocumentationProject createDocumentationProject(
		long documentationProjectId) {
		return documentationProjectPersistence.create(documentationProjectId);
	}

	/**
	 * Deletes the documentation project with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param documentationProjectId the primary key of the documentation project
	 * @return the documentation project that was removed
	 * @throws PortalException if a documentation project with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DocumentationProject deleteDocumentationProject(
		long documentationProjectId) throws PortalException {
		return documentationProjectPersistence.remove(documentationProjectId);
	}

	/**
	 * Deletes the documentation project from the database. Also notifies the appropriate model listeners.
	 *
	 * @param documentationProject the documentation project
	 * @return the documentation project that was removed
	 * @throws PortalException
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DocumentationProject deleteDocumentationProject(
		DocumentationProject documentationProject) throws PortalException {
		return documentationProjectPersistence.remove(documentationProject);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(DocumentationProject.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return documentationProjectPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.osb.ldn.documentation.project.model.impl.DocumentationProjectModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return documentationProjectPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.osb.ldn.documentation.project.model.impl.DocumentationProjectModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return documentationProjectPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return documentationProjectPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return documentationProjectPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public DocumentationProject fetchDocumentationProject(
		long documentationProjectId) {
		return documentationProjectPersistence.fetchByPrimaryKey(documentationProjectId);
	}

	/**
	 * Returns the documentation project matching the UUID and group.
	 *
	 * @param uuid the documentation project's UUID
	 * @param groupId the primary key of the group
	 * @return the matching documentation project, or <code>null</code> if a matching documentation project could not be found
	 */
	@Override
	public DocumentationProject fetchDocumentationProjectByUuidAndGroupId(
		String uuid, long groupId) {
		return documentationProjectPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the documentation project with the primary key.
	 *
	 * @param documentationProjectId the primary key of the documentation project
	 * @return the documentation project
	 * @throws PortalException if a documentation project with the primary key could not be found
	 */
	@Override
	public DocumentationProject getDocumentationProject(
		long documentationProjectId) throws PortalException {
		return documentationProjectPersistence.findByPrimaryKey(documentationProjectId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(documentationProjectLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(DocumentationProject.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"documentationProjectId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(documentationProjectLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(DocumentationProject.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"documentationProjectId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(documentationProjectLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(DocumentationProject.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"documentationProjectId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<DocumentationProject>() {
				@Override
				public void performAction(
					DocumentationProject documentationProject)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						documentationProject);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(DocumentationProject.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return documentationProjectLocalService.deleteDocumentationProject((DocumentationProject)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return documentationProjectPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the documentation projects matching the UUID and company.
	 *
	 * @param uuid the UUID of the documentation projects
	 * @param companyId the primary key of the company
	 * @return the matching documentation projects, or an empty list if no matches were found
	 */
	@Override
	public List<DocumentationProject> getDocumentationProjectsByUuidAndCompanyId(
		String uuid, long companyId) {
		return documentationProjectPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of documentation projects matching the UUID and company.
	 *
	 * @param uuid the UUID of the documentation projects
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of documentation projects
	 * @param end the upper bound of the range of documentation projects (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching documentation projects, or an empty list if no matches were found
	 */
	@Override
	public List<DocumentationProject> getDocumentationProjectsByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<DocumentationProject> orderByComparator) {
		return documentationProjectPersistence.findByUuid_C(uuid, companyId,
			start, end, orderByComparator);
	}

	/**
	 * Returns the documentation project matching the UUID and group.
	 *
	 * @param uuid the documentation project's UUID
	 * @param groupId the primary key of the group
	 * @return the matching documentation project
	 * @throws PortalException if a matching documentation project could not be found
	 */
	@Override
	public DocumentationProject getDocumentationProjectByUuidAndGroupId(
		String uuid, long groupId) throws PortalException {
		return documentationProjectPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the documentation projects.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.osb.ldn.documentation.project.model.impl.DocumentationProjectModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of documentation projects
	 * @param end the upper bound of the range of documentation projects (not inclusive)
	 * @return the range of documentation projects
	 */
	@Override
	public List<DocumentationProject> getDocumentationProjects(int start,
		int end) {
		return documentationProjectPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of documentation projects.
	 *
	 * @return the number of documentation projects
	 */
	@Override
	public int getDocumentationProjectsCount() {
		return documentationProjectPersistence.countAll();
	}

	/**
	 * Updates the documentation project in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param documentationProject the documentation project
	 * @return the documentation project that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DocumentationProject updateDocumentationProject(
		DocumentationProject documentationProject) {
		return documentationProjectPersistence.update(documentationProject);
	}

	/**
	 * Returns the documentation project local service.
	 *
	 * @return the documentation project local service
	 */
	public DocumentationProjectLocalService getDocumentationProjectLocalService() {
		return documentationProjectLocalService;
	}

	/**
	 * Sets the documentation project local service.
	 *
	 * @param documentationProjectLocalService the documentation project local service
	 */
	public void setDocumentationProjectLocalService(
		DocumentationProjectLocalService documentationProjectLocalService) {
		this.documentationProjectLocalService = documentationProjectLocalService;
	}

	/**
	 * Returns the documentation project persistence.
	 *
	 * @return the documentation project persistence
	 */
	public DocumentationProjectPersistence getDocumentationProjectPersistence() {
		return documentationProjectPersistence;
	}

	/**
	 * Sets the documentation project persistence.
	 *
	 * @param documentationProjectPersistence the documentation project persistence
	 */
	public void setDocumentationProjectPersistence(
		DocumentationProjectPersistence documentationProjectPersistence) {
		this.documentationProjectPersistence = documentationProjectPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.osb.ldn.documentation.project.model.DocumentationProject",
			documentationProjectLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.osb.ldn.documentation.project.model.DocumentationProject");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return DocumentationProjectLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return DocumentationProject.class;
	}

	protected String getModelClassName() {
		return DocumentationProject.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = documentationProjectPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = DocumentationProjectLocalService.class)
	protected DocumentationProjectLocalService documentationProjectLocalService;
	@BeanReference(type = DocumentationProjectPersistence.class)
	protected DocumentationProjectPersistence documentationProjectPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}