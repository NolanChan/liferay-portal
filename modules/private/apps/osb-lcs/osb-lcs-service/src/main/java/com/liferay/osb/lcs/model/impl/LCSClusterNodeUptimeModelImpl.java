/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osb.lcs.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.osb.lcs.model.LCSClusterNodeUptime;
import com.liferay.osb.lcs.model.LCSClusterNodeUptimeModel;
import com.liferay.osb.lcs.model.LCSClusterNodeUptimeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LCSClusterNodeUptime service. Represents a row in the &quot;OSBLCS_LCSClusterNodeUptime&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LCSClusterNodeUptimeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LCSClusterNodeUptimeImpl}.
 * </p>
 *
 * @author Igor Beslic
 * @see LCSClusterNodeUptimeImpl
 * @see LCSClusterNodeUptime
 * @see LCSClusterNodeUptimeModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LCSClusterNodeUptimeModelImpl extends BaseModelImpl<LCSClusterNodeUptime>
	implements LCSClusterNodeUptimeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a l c s cluster node uptime model instance should use the {@link LCSClusterNodeUptime} interface instead.
	 */
	public static final String TABLE_NAME = "OSBLCS_LCSClusterNodeUptime";
	public static final Object[][] TABLE_COLUMNS = {
			{ "lcsClusterNodeUptimeId", Types.BIGINT },
			{ "lcsClusterNodeId", Types.BIGINT },
			{ "startTime", Types.BIGINT },
			{ "endTime", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("lcsClusterNodeUptimeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lcsClusterNodeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("startTime", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("endTime", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table OSBLCS_LCSClusterNodeUptime (lcsClusterNodeUptimeId LONG not null primary key,lcsClusterNodeId LONG,startTime LONG,endTime LONG)";
	public static final String TABLE_SQL_DROP = "drop table OSBLCS_LCSClusterNodeUptime";
	public static final String ORDER_BY_JPQL = " ORDER BY lcsClusterNodeUptime.lcsClusterNodeId ASC, lcsClusterNodeUptime.startTime ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OSBLCS_LCSClusterNodeUptime.lcsClusterNodeId ASC, OSBLCS_LCSClusterNodeUptime.startTime ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.osb.lcs.model.LCSClusterNodeUptime"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.osb.lcs.model.LCSClusterNodeUptime"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.osb.lcs.model.LCSClusterNodeUptime"),
			true);
	public static final long ENDTIME_COLUMN_BITMASK = 1L;
	public static final long LCSCLUSTERNODEID_COLUMN_BITMASK = 2L;
	public static final long STARTTIME_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LCSClusterNodeUptime toModel(
		LCSClusterNodeUptimeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LCSClusterNodeUptime model = new LCSClusterNodeUptimeImpl();

		model.setLcsClusterNodeUptimeId(soapModel.getLcsClusterNodeUptimeId());
		model.setLcsClusterNodeId(soapModel.getLcsClusterNodeId());
		model.setStartTime(soapModel.getStartTime());
		model.setEndTime(soapModel.getEndTime());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LCSClusterNodeUptime> toModels(
		LCSClusterNodeUptimeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LCSClusterNodeUptime> models = new ArrayList<LCSClusterNodeUptime>(soapModels.length);

		for (LCSClusterNodeUptimeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.osb.lcs.model.LCSClusterNodeUptime"));

	public LCSClusterNodeUptimeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lcsClusterNodeUptimeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLcsClusterNodeUptimeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lcsClusterNodeUptimeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LCSClusterNodeUptime.class;
	}

	@Override
	public String getModelClassName() {
		return LCSClusterNodeUptime.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("lcsClusterNodeUptimeId", getLcsClusterNodeUptimeId());
		attributes.put("lcsClusterNodeId", getLcsClusterNodeId());
		attributes.put("startTime", getStartTime());
		attributes.put("endTime", getEndTime());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long lcsClusterNodeUptimeId = (Long)attributes.get(
				"lcsClusterNodeUptimeId");

		if (lcsClusterNodeUptimeId != null) {
			setLcsClusterNodeUptimeId(lcsClusterNodeUptimeId);
		}

		Long lcsClusterNodeId = (Long)attributes.get("lcsClusterNodeId");

		if (lcsClusterNodeId != null) {
			setLcsClusterNodeId(lcsClusterNodeId);
		}

		Long startTime = (Long)attributes.get("startTime");

		if (startTime != null) {
			setStartTime(startTime);
		}

		Long endTime = (Long)attributes.get("endTime");

		if (endTime != null) {
			setEndTime(endTime);
		}
	}

	@JSON
	@Override
	public long getLcsClusterNodeUptimeId() {
		return _lcsClusterNodeUptimeId;
	}

	@Override
	public void setLcsClusterNodeUptimeId(long lcsClusterNodeUptimeId) {
		_lcsClusterNodeUptimeId = lcsClusterNodeUptimeId;
	}

	@JSON
	@Override
	public long getLcsClusterNodeId() {
		return _lcsClusterNodeId;
	}

	@Override
	public void setLcsClusterNodeId(long lcsClusterNodeId) {
		_columnBitmask = -1L;

		if (!_setOriginalLcsClusterNodeId) {
			_setOriginalLcsClusterNodeId = true;

			_originalLcsClusterNodeId = _lcsClusterNodeId;
		}

		_lcsClusterNodeId = lcsClusterNodeId;
	}

	public long getOriginalLcsClusterNodeId() {
		return _originalLcsClusterNodeId;
	}

	@JSON
	@Override
	public long getStartTime() {
		return _startTime;
	}

	@Override
	public void setStartTime(long startTime) {
		_columnBitmask = -1L;

		if (!_setOriginalStartTime) {
			_setOriginalStartTime = true;

			_originalStartTime = _startTime;
		}

		_startTime = startTime;
	}

	public long getOriginalStartTime() {
		return _originalStartTime;
	}

	@JSON
	@Override
	public long getEndTime() {
		return _endTime;
	}

	@Override
	public void setEndTime(long endTime) {
		_columnBitmask |= ENDTIME_COLUMN_BITMASK;

		if (!_setOriginalEndTime) {
			_setOriginalEndTime = true;

			_originalEndTime = _endTime;
		}

		_endTime = endTime;
	}

	public long getOriginalEndTime() {
		return _originalEndTime;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LCSClusterNodeUptime.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LCSClusterNodeUptime toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LCSClusterNodeUptime)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LCSClusterNodeUptimeImpl lcsClusterNodeUptimeImpl = new LCSClusterNodeUptimeImpl();

		lcsClusterNodeUptimeImpl.setLcsClusterNodeUptimeId(getLcsClusterNodeUptimeId());
		lcsClusterNodeUptimeImpl.setLcsClusterNodeId(getLcsClusterNodeId());
		lcsClusterNodeUptimeImpl.setStartTime(getStartTime());
		lcsClusterNodeUptimeImpl.setEndTime(getEndTime());

		lcsClusterNodeUptimeImpl.resetOriginalValues();

		return lcsClusterNodeUptimeImpl;
	}

	@Override
	public int compareTo(LCSClusterNodeUptime lcsClusterNodeUptime) {
		int value = 0;

		if (getLcsClusterNodeId() < lcsClusterNodeUptime.getLcsClusterNodeId()) {
			value = -1;
		}
		else if (getLcsClusterNodeId() > lcsClusterNodeUptime.getLcsClusterNodeId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getStartTime() < lcsClusterNodeUptime.getStartTime()) {
			value = -1;
		}
		else if (getStartTime() > lcsClusterNodeUptime.getStartTime()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LCSClusterNodeUptime)) {
			return false;
		}

		LCSClusterNodeUptime lcsClusterNodeUptime = (LCSClusterNodeUptime)obj;

		long primaryKey = lcsClusterNodeUptime.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LCSClusterNodeUptimeModelImpl lcsClusterNodeUptimeModelImpl = this;

		lcsClusterNodeUptimeModelImpl._originalLcsClusterNodeId = lcsClusterNodeUptimeModelImpl._lcsClusterNodeId;

		lcsClusterNodeUptimeModelImpl._setOriginalLcsClusterNodeId = false;

		lcsClusterNodeUptimeModelImpl._originalStartTime = lcsClusterNodeUptimeModelImpl._startTime;

		lcsClusterNodeUptimeModelImpl._setOriginalStartTime = false;

		lcsClusterNodeUptimeModelImpl._originalEndTime = lcsClusterNodeUptimeModelImpl._endTime;

		lcsClusterNodeUptimeModelImpl._setOriginalEndTime = false;

		lcsClusterNodeUptimeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LCSClusterNodeUptime> toCacheModel() {
		LCSClusterNodeUptimeCacheModel lcsClusterNodeUptimeCacheModel = new LCSClusterNodeUptimeCacheModel();

		lcsClusterNodeUptimeCacheModel.lcsClusterNodeUptimeId = getLcsClusterNodeUptimeId();

		lcsClusterNodeUptimeCacheModel.lcsClusterNodeId = getLcsClusterNodeId();

		lcsClusterNodeUptimeCacheModel.startTime = getStartTime();

		lcsClusterNodeUptimeCacheModel.endTime = getEndTime();

		return lcsClusterNodeUptimeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{lcsClusterNodeUptimeId=");
		sb.append(getLcsClusterNodeUptimeId());
		sb.append(", lcsClusterNodeId=");
		sb.append(getLcsClusterNodeId());
		sb.append(", startTime=");
		sb.append(getStartTime());
		sb.append(", endTime=");
		sb.append(getEndTime());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.liferay.osb.lcs.model.LCSClusterNodeUptime");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>lcsClusterNodeUptimeId</column-name><column-value><![CDATA[");
		sb.append(getLcsClusterNodeUptimeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lcsClusterNodeId</column-name><column-value><![CDATA[");
		sb.append(getLcsClusterNodeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startTime</column-name><column-value><![CDATA[");
		sb.append(getStartTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endTime</column-name><column-value><![CDATA[");
		sb.append(getEndTime());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LCSClusterNodeUptime.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LCSClusterNodeUptime.class
		};
	private long _lcsClusterNodeUptimeId;
	private long _lcsClusterNodeId;
	private long _originalLcsClusterNodeId;
	private boolean _setOriginalLcsClusterNodeId;
	private long _startTime;
	private long _originalStartTime;
	private boolean _setOriginalStartTime;
	private long _endTime;
	private long _originalEndTime;
	private boolean _setOriginalEndTime;
	private long _columnBitmask;
	private LCSClusterNodeUptime _escapedModel;
}