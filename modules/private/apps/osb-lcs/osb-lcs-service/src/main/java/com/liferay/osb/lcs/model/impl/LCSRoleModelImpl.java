/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osb.lcs.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.osb.lcs.model.LCSRole;
import com.liferay.osb.lcs.model.LCSRoleModel;
import com.liferay.osb.lcs.model.LCSRoleSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LCSRole service. Represents a row in the &quot;OSBLCS_LCSRole&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LCSRoleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LCSRoleImpl}.
 * </p>
 *
 * @author Igor Beslic
 * @see LCSRoleImpl
 * @see LCSRole
 * @see LCSRoleModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LCSRoleModelImpl extends BaseModelImpl<LCSRole>
	implements LCSRoleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a l c s role model instance should use the {@link LCSRole} interface instead.
	 */
	public static final String TABLE_NAME = "OSBLCS_LCSRole";
	public static final Object[][] TABLE_COLUMNS = {
			{ "lcsRoleId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "lcsProjectId", Types.BIGINT },
			{ "lcsClusterEntryId", Types.BIGINT },
			{ "role", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("lcsRoleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lcsProjectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lcsClusterEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("role", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table OSBLCS_LCSRole (lcsRoleId LONG not null primary key,userId LONG,lcsProjectId LONG,lcsClusterEntryId LONG,role INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table OSBLCS_LCSRole";
	public static final String ORDER_BY_JPQL = " ORDER BY lcsRole.lcsRoleId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OSBLCS_LCSRole.lcsRoleId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.osb.lcs.model.LCSRole"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.osb.lcs.model.LCSRole"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.osb.lcs.model.LCSRole"),
			true);
	public static final long LCSCLUSTERENTRYID_COLUMN_BITMASK = 1L;
	public static final long LCSPROJECTID_COLUMN_BITMASK = 2L;
	public static final long ROLE_COLUMN_BITMASK = 4L;
	public static final long USERID_COLUMN_BITMASK = 8L;
	public static final long LCSROLEID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LCSRole toModel(LCSRoleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LCSRole model = new LCSRoleImpl();

		model.setLcsRoleId(soapModel.getLcsRoleId());
		model.setUserId(soapModel.getUserId());
		model.setLcsProjectId(soapModel.getLcsProjectId());
		model.setLcsClusterEntryId(soapModel.getLcsClusterEntryId());
		model.setRole(soapModel.getRole());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LCSRole> toModels(LCSRoleSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LCSRole> models = new ArrayList<LCSRole>(soapModels.length);

		for (LCSRoleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.osb.lcs.model.LCSRole"));

	public LCSRoleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lcsRoleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLcsRoleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lcsRoleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LCSRole.class;
	}

	@Override
	public String getModelClassName() {
		return LCSRole.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("lcsRoleId", getLcsRoleId());
		attributes.put("userId", getUserId());
		attributes.put("lcsProjectId", getLcsProjectId());
		attributes.put("lcsClusterEntryId", getLcsClusterEntryId());
		attributes.put("role", getRole());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long lcsRoleId = (Long)attributes.get("lcsRoleId");

		if (lcsRoleId != null) {
			setLcsRoleId(lcsRoleId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long lcsProjectId = (Long)attributes.get("lcsProjectId");

		if (lcsProjectId != null) {
			setLcsProjectId(lcsProjectId);
		}

		Long lcsClusterEntryId = (Long)attributes.get("lcsClusterEntryId");

		if (lcsClusterEntryId != null) {
			setLcsClusterEntryId(lcsClusterEntryId);
		}

		Integer role = (Integer)attributes.get("role");

		if (role != null) {
			setRole(role);
		}
	}

	@JSON
	@Override
	public long getLcsRoleId() {
		return _lcsRoleId;
	}

	@Override
	public void setLcsRoleId(long lcsRoleId) {
		_lcsRoleId = lcsRoleId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getLcsProjectId() {
		return _lcsProjectId;
	}

	@Override
	public void setLcsProjectId(long lcsProjectId) {
		_columnBitmask |= LCSPROJECTID_COLUMN_BITMASK;

		if (!_setOriginalLcsProjectId) {
			_setOriginalLcsProjectId = true;

			_originalLcsProjectId = _lcsProjectId;
		}

		_lcsProjectId = lcsProjectId;
	}

	public long getOriginalLcsProjectId() {
		return _originalLcsProjectId;
	}

	@JSON
	@Override
	public long getLcsClusterEntryId() {
		return _lcsClusterEntryId;
	}

	@Override
	public void setLcsClusterEntryId(long lcsClusterEntryId) {
		_columnBitmask |= LCSCLUSTERENTRYID_COLUMN_BITMASK;

		if (!_setOriginalLcsClusterEntryId) {
			_setOriginalLcsClusterEntryId = true;

			_originalLcsClusterEntryId = _lcsClusterEntryId;
		}

		_lcsClusterEntryId = lcsClusterEntryId;
	}

	public long getOriginalLcsClusterEntryId() {
		return _originalLcsClusterEntryId;
	}

	@JSON
	@Override
	public int getRole() {
		return _role;
	}

	@Override
	public void setRole(int role) {
		_columnBitmask |= ROLE_COLUMN_BITMASK;

		if (!_setOriginalRole) {
			_setOriginalRole = true;

			_originalRole = _role;
		}

		_role = role;
	}

	public int getOriginalRole() {
		return _originalRole;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LCSRole.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LCSRole toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LCSRole)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LCSRoleImpl lcsRoleImpl = new LCSRoleImpl();

		lcsRoleImpl.setLcsRoleId(getLcsRoleId());
		lcsRoleImpl.setUserId(getUserId());
		lcsRoleImpl.setLcsProjectId(getLcsProjectId());
		lcsRoleImpl.setLcsClusterEntryId(getLcsClusterEntryId());
		lcsRoleImpl.setRole(getRole());

		lcsRoleImpl.resetOriginalValues();

		return lcsRoleImpl;
	}

	@Override
	public int compareTo(LCSRole lcsRole) {
		long primaryKey = lcsRole.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LCSRole)) {
			return false;
		}

		LCSRole lcsRole = (LCSRole)obj;

		long primaryKey = lcsRole.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LCSRoleModelImpl lcsRoleModelImpl = this;

		lcsRoleModelImpl._originalUserId = lcsRoleModelImpl._userId;

		lcsRoleModelImpl._setOriginalUserId = false;

		lcsRoleModelImpl._originalLcsProjectId = lcsRoleModelImpl._lcsProjectId;

		lcsRoleModelImpl._setOriginalLcsProjectId = false;

		lcsRoleModelImpl._originalLcsClusterEntryId = lcsRoleModelImpl._lcsClusterEntryId;

		lcsRoleModelImpl._setOriginalLcsClusterEntryId = false;

		lcsRoleModelImpl._originalRole = lcsRoleModelImpl._role;

		lcsRoleModelImpl._setOriginalRole = false;

		lcsRoleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LCSRole> toCacheModel() {
		LCSRoleCacheModel lcsRoleCacheModel = new LCSRoleCacheModel();

		lcsRoleCacheModel.lcsRoleId = getLcsRoleId();

		lcsRoleCacheModel.userId = getUserId();

		lcsRoleCacheModel.lcsProjectId = getLcsProjectId();

		lcsRoleCacheModel.lcsClusterEntryId = getLcsClusterEntryId();

		lcsRoleCacheModel.role = getRole();

		return lcsRoleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{lcsRoleId=");
		sb.append(getLcsRoleId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", lcsProjectId=");
		sb.append(getLcsProjectId());
		sb.append(", lcsClusterEntryId=");
		sb.append(getLcsClusterEntryId());
		sb.append(", role=");
		sb.append(getRole());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.osb.lcs.model.LCSRole");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>lcsRoleId</column-name><column-value><![CDATA[");
		sb.append(getLcsRoleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lcsProjectId</column-name><column-value><![CDATA[");
		sb.append(getLcsProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lcsClusterEntryId</column-name><column-value><![CDATA[");
		sb.append(getLcsClusterEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>role</column-name><column-value><![CDATA[");
		sb.append(getRole());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LCSRole.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LCSRole.class
		};
	private long _lcsRoleId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _lcsProjectId;
	private long _originalLcsProjectId;
	private boolean _setOriginalLcsProjectId;
	private long _lcsClusterEntryId;
	private long _originalLcsClusterEntryId;
	private boolean _setOriginalLcsClusterEntryId;
	private int _role;
	private int _originalRole;
	private boolean _setOriginalRole;
	private long _columnBitmask;
	private LCSRole _escapedModel;
}