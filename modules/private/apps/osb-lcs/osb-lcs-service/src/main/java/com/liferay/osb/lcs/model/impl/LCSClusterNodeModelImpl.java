/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osb.lcs.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.osb.lcs.model.LCSClusterNode;
import com.liferay.osb.lcs.model.LCSClusterNodeModel;
import com.liferay.osb.lcs.model.LCSClusterNodeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LCSClusterNode service. Represents a row in the &quot;OSBLCS_LCSClusterNode&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LCSClusterNodeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LCSClusterNodeImpl}.
 * </p>
 *
 * @author Igor Beslic
 * @see LCSClusterNodeImpl
 * @see LCSClusterNode
 * @see LCSClusterNodeModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LCSClusterNodeModelImpl extends BaseModelImpl<LCSClusterNode>
	implements LCSClusterNodeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a l c s cluster node model instance should use the {@link LCSClusterNode} interface instead.
	 */
	public static final String TABLE_NAME = "OSBLCS_LCSClusterNode";
	public static final Object[][] TABLE_COLUMNS = {
			{ "lcsClusterNodeId", Types.BIGINT },
			{ "lcsClusterEntryId", Types.BIGINT },
			{ "installationId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "buildNumber", Types.INTEGER },
			{ "key_", Types.VARCHAR },
			{ "location", Types.VARCHAR },
			{ "processorCoresTotal", Types.INTEGER },
			{ "archived", Types.BOOLEAN },
			{ "status", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("lcsClusterNodeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lcsClusterEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("installationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("buildNumber", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("key_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processorCoresTotal", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("archived", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table OSBLCS_LCSClusterNode (lcsClusterNodeId LONG not null primary key,lcsClusterEntryId LONG,installationId LONG,name VARCHAR(75) null,description VARCHAR(75) null,buildNumber INTEGER,key_ VARCHAR(75) null,location VARCHAR(75) null,processorCoresTotal INTEGER,archived BOOLEAN,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table OSBLCS_LCSClusterNode";
	public static final String ORDER_BY_JPQL = " ORDER BY lcsClusterNode.lcsClusterNodeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OSBLCS_LCSClusterNode.lcsClusterNodeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.osb.lcs.model.LCSClusterNode"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.osb.lcs.model.LCSClusterNode"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.osb.lcs.model.LCSClusterNode"),
			true);
	public static final long ARCHIVED_COLUMN_BITMASK = 1L;
	public static final long BUILDNUMBER_COLUMN_BITMASK = 2L;
	public static final long KEY_COLUMN_BITMASK = 4L;
	public static final long LCSCLUSTERENTRYID_COLUMN_BITMASK = 8L;
	public static final long NAME_COLUMN_BITMASK = 16L;
	public static final long LCSCLUSTERNODEID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LCSClusterNode toModel(LCSClusterNodeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LCSClusterNode model = new LCSClusterNodeImpl();

		model.setLcsClusterNodeId(soapModel.getLcsClusterNodeId());
		model.setLcsClusterEntryId(soapModel.getLcsClusterEntryId());
		model.setInstallationId(soapModel.getInstallationId());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setBuildNumber(soapModel.getBuildNumber());
		model.setKey(soapModel.getKey());
		model.setLocation(soapModel.getLocation());
		model.setProcessorCoresTotal(soapModel.getProcessorCoresTotal());
		model.setArchived(soapModel.getArchived());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LCSClusterNode> toModels(LCSClusterNodeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LCSClusterNode> models = new ArrayList<LCSClusterNode>(soapModels.length);

		for (LCSClusterNodeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.osb.lcs.model.LCSClusterNode"));

	public LCSClusterNodeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lcsClusterNodeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLcsClusterNodeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lcsClusterNodeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LCSClusterNode.class;
	}

	@Override
	public String getModelClassName() {
		return LCSClusterNode.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("lcsClusterNodeId", getLcsClusterNodeId());
		attributes.put("lcsClusterEntryId", getLcsClusterEntryId());
		attributes.put("installationId", getInstallationId());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("buildNumber", getBuildNumber());
		attributes.put("key", getKey());
		attributes.put("location", getLocation());
		attributes.put("processorCoresTotal", getProcessorCoresTotal());
		attributes.put("archived", getArchived());
		attributes.put("status", getStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long lcsClusterNodeId = (Long)attributes.get("lcsClusterNodeId");

		if (lcsClusterNodeId != null) {
			setLcsClusterNodeId(lcsClusterNodeId);
		}

		Long lcsClusterEntryId = (Long)attributes.get("lcsClusterEntryId");

		if (lcsClusterEntryId != null) {
			setLcsClusterEntryId(lcsClusterEntryId);
		}

		Long installationId = (Long)attributes.get("installationId");

		if (installationId != null) {
			setInstallationId(installationId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Integer buildNumber = (Integer)attributes.get("buildNumber");

		if (buildNumber != null) {
			setBuildNumber(buildNumber);
		}

		String key = (String)attributes.get("key");

		if (key != null) {
			setKey(key);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}

		Integer processorCoresTotal = (Integer)attributes.get(
				"processorCoresTotal");

		if (processorCoresTotal != null) {
			setProcessorCoresTotal(processorCoresTotal);
		}

		Boolean archived = (Boolean)attributes.get("archived");

		if (archived != null) {
			setArchived(archived);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getLcsClusterNodeId() {
		return _lcsClusterNodeId;
	}

	@Override
	public void setLcsClusterNodeId(long lcsClusterNodeId) {
		_lcsClusterNodeId = lcsClusterNodeId;
	}

	@JSON
	@Override
	public long getLcsClusterEntryId() {
		return _lcsClusterEntryId;
	}

	@Override
	public void setLcsClusterEntryId(long lcsClusterEntryId) {
		_columnBitmask |= LCSCLUSTERENTRYID_COLUMN_BITMASK;

		if (!_setOriginalLcsClusterEntryId) {
			_setOriginalLcsClusterEntryId = true;

			_originalLcsClusterEntryId = _lcsClusterEntryId;
		}

		_lcsClusterEntryId = lcsClusterEntryId;
	}

	public long getOriginalLcsClusterEntryId() {
		return _originalLcsClusterEntryId;
	}

	@JSON
	@Override
	public long getInstallationId() {
		return _installationId;
	}

	@Override
	public void setInstallationId(long installationId) {
		_installationId = installationId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public int getBuildNumber() {
		return _buildNumber;
	}

	@Override
	public void setBuildNumber(int buildNumber) {
		_columnBitmask |= BUILDNUMBER_COLUMN_BITMASK;

		if (!_setOriginalBuildNumber) {
			_setOriginalBuildNumber = true;

			_originalBuildNumber = _buildNumber;
		}

		_buildNumber = buildNumber;
	}

	public int getOriginalBuildNumber() {
		return _originalBuildNumber;
	}

	@JSON
	@Override
	public String getKey() {
		if (_key == null) {
			return StringPool.BLANK;
		}
		else {
			return _key;
		}
	}

	@Override
	public void setKey(String key) {
		_columnBitmask |= KEY_COLUMN_BITMASK;

		if (_originalKey == null) {
			_originalKey = _key;
		}

		_key = key;
	}

	public String getOriginalKey() {
		return GetterUtil.getString(_originalKey);
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@JSON
	@Override
	public int getProcessorCoresTotal() {
		return _processorCoresTotal;
	}

	@Override
	public void setProcessorCoresTotal(int processorCoresTotal) {
		_processorCoresTotal = processorCoresTotal;
	}

	@JSON
	@Override
	public boolean getArchived() {
		return _archived;
	}

	@JSON
	@Override
	public boolean isArchived() {
		return _archived;
	}

	@Override
	public void setArchived(boolean archived) {
		_columnBitmask |= ARCHIVED_COLUMN_BITMASK;

		if (!_setOriginalArchived) {
			_setOriginalArchived = true;

			_originalArchived = _archived;
		}

		_archived = archived;
	}

	public boolean getOriginalArchived() {
		return _originalArchived;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LCSClusterNode.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LCSClusterNode toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LCSClusterNode)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LCSClusterNodeImpl lcsClusterNodeImpl = new LCSClusterNodeImpl();

		lcsClusterNodeImpl.setLcsClusterNodeId(getLcsClusterNodeId());
		lcsClusterNodeImpl.setLcsClusterEntryId(getLcsClusterEntryId());
		lcsClusterNodeImpl.setInstallationId(getInstallationId());
		lcsClusterNodeImpl.setName(getName());
		lcsClusterNodeImpl.setDescription(getDescription());
		lcsClusterNodeImpl.setBuildNumber(getBuildNumber());
		lcsClusterNodeImpl.setKey(getKey());
		lcsClusterNodeImpl.setLocation(getLocation());
		lcsClusterNodeImpl.setProcessorCoresTotal(getProcessorCoresTotal());
		lcsClusterNodeImpl.setArchived(getArchived());
		lcsClusterNodeImpl.setStatus(getStatus());

		lcsClusterNodeImpl.resetOriginalValues();

		return lcsClusterNodeImpl;
	}

	@Override
	public int compareTo(LCSClusterNode lcsClusterNode) {
		long primaryKey = lcsClusterNode.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LCSClusterNode)) {
			return false;
		}

		LCSClusterNode lcsClusterNode = (LCSClusterNode)obj;

		long primaryKey = lcsClusterNode.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LCSClusterNodeModelImpl lcsClusterNodeModelImpl = this;

		lcsClusterNodeModelImpl._originalLcsClusterEntryId = lcsClusterNodeModelImpl._lcsClusterEntryId;

		lcsClusterNodeModelImpl._setOriginalLcsClusterEntryId = false;

		lcsClusterNodeModelImpl._originalName = lcsClusterNodeModelImpl._name;

		lcsClusterNodeModelImpl._originalBuildNumber = lcsClusterNodeModelImpl._buildNumber;

		lcsClusterNodeModelImpl._setOriginalBuildNumber = false;

		lcsClusterNodeModelImpl._originalKey = lcsClusterNodeModelImpl._key;

		lcsClusterNodeModelImpl._originalArchived = lcsClusterNodeModelImpl._archived;

		lcsClusterNodeModelImpl._setOriginalArchived = false;

		lcsClusterNodeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LCSClusterNode> toCacheModel() {
		LCSClusterNodeCacheModel lcsClusterNodeCacheModel = new LCSClusterNodeCacheModel();

		lcsClusterNodeCacheModel.lcsClusterNodeId = getLcsClusterNodeId();

		lcsClusterNodeCacheModel.lcsClusterEntryId = getLcsClusterEntryId();

		lcsClusterNodeCacheModel.installationId = getInstallationId();

		lcsClusterNodeCacheModel.name = getName();

		String name = lcsClusterNodeCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			lcsClusterNodeCacheModel.name = null;
		}

		lcsClusterNodeCacheModel.description = getDescription();

		String description = lcsClusterNodeCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			lcsClusterNodeCacheModel.description = null;
		}

		lcsClusterNodeCacheModel.buildNumber = getBuildNumber();

		lcsClusterNodeCacheModel.key = getKey();

		String key = lcsClusterNodeCacheModel.key;

		if ((key != null) && (key.length() == 0)) {
			lcsClusterNodeCacheModel.key = null;
		}

		lcsClusterNodeCacheModel.location = getLocation();

		String location = lcsClusterNodeCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			lcsClusterNodeCacheModel.location = null;
		}

		lcsClusterNodeCacheModel.processorCoresTotal = getProcessorCoresTotal();

		lcsClusterNodeCacheModel.archived = getArchived();

		lcsClusterNodeCacheModel.status = getStatus();

		return lcsClusterNodeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{lcsClusterNodeId=");
		sb.append(getLcsClusterNodeId());
		sb.append(", lcsClusterEntryId=");
		sb.append(getLcsClusterEntryId());
		sb.append(", installationId=");
		sb.append(getInstallationId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", buildNumber=");
		sb.append(getBuildNumber());
		sb.append(", key=");
		sb.append(getKey());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append(", processorCoresTotal=");
		sb.append(getProcessorCoresTotal());
		sb.append(", archived=");
		sb.append(getArchived());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.liferay.osb.lcs.model.LCSClusterNode");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>lcsClusterNodeId</column-name><column-value><![CDATA[");
		sb.append(getLcsClusterNodeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lcsClusterEntryId</column-name><column-value><![CDATA[");
		sb.append(getLcsClusterEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>installationId</column-name><column-value><![CDATA[");
		sb.append(getInstallationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>buildNumber</column-name><column-value><![CDATA[");
		sb.append(getBuildNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>key</column-name><column-value><![CDATA[");
		sb.append(getKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processorCoresTotal</column-name><column-value><![CDATA[");
		sb.append(getProcessorCoresTotal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>archived</column-name><column-value><![CDATA[");
		sb.append(getArchived());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LCSClusterNode.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LCSClusterNode.class
		};
	private long _lcsClusterNodeId;
	private long _lcsClusterEntryId;
	private long _originalLcsClusterEntryId;
	private boolean _setOriginalLcsClusterEntryId;
	private long _installationId;
	private String _name;
	private String _originalName;
	private String _description;
	private int _buildNumber;
	private int _originalBuildNumber;
	private boolean _setOriginalBuildNumber;
	private String _key;
	private String _originalKey;
	private String _location;
	private int _processorCoresTotal;
	private boolean _archived;
	private boolean _originalArchived;
	private boolean _setOriginalArchived;
	private int _status;
	private long _columnBitmask;
	private LCSClusterNode _escapedModel;
}