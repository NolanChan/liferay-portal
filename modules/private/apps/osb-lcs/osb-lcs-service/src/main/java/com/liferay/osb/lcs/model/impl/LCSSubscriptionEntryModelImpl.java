/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osb.lcs.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.osb.lcs.model.LCSSubscriptionEntry;
import com.liferay.osb.lcs.model.LCSSubscriptionEntryModel;
import com.liferay.osb.lcs.model.LCSSubscriptionEntrySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LCSSubscriptionEntry service. Represents a row in the &quot;OSBLCS_LCSSubscriptionEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LCSSubscriptionEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LCSSubscriptionEntryImpl}.
 * </p>
 *
 * @author Igor Beslic
 * @see LCSSubscriptionEntryImpl
 * @see LCSSubscriptionEntry
 * @see LCSSubscriptionEntryModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LCSSubscriptionEntryModelImpl extends BaseModelImpl<LCSSubscriptionEntry>
	implements LCSSubscriptionEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a l c s subscription entry model instance should use the {@link LCSSubscriptionEntry} interface instead.
	 */
	public static final String TABLE_NAME = "OSBLCS_LCSSubscriptionEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "lcsSubscriptionEntryId", Types.BIGINT },
			{ "lcsProjectId", Types.BIGINT },
			{ "actualPrice", Types.DOUBLE },
			{ "currencyCode", Types.VARCHAR },
			{ "instanceSize", Types.INTEGER },
			{ "type_", Types.VARCHAR },
			{ "platform", Types.VARCHAR },
			{ "platformVersion", Types.INTEGER },
			{ "processorCoresAllowed", Types.INTEGER },
			{ "product", Types.VARCHAR },
			{ "productVersion", Types.INTEGER },
			{ "serversAllowed", Types.INTEGER },
			{ "serversUsed", Types.INTEGER },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "supportStartDate", Types.TIMESTAMP },
			{ "supportEndDate", Types.TIMESTAMP },
			{ "active_", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("lcsSubscriptionEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lcsProjectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("actualPrice", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("currencyCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("instanceSize", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("platform", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("platformVersion", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("processorCoresAllowed", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("product", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productVersion", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("serversAllowed", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("serversUsed", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("supportStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("supportEndDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table OSBLCS_LCSSubscriptionEntry (lcsSubscriptionEntryId LONG not null primary key,lcsProjectId LONG,actualPrice DOUBLE,currencyCode VARCHAR(75) null,instanceSize INTEGER,type_ VARCHAR(75) null,platform VARCHAR(75) null,platformVersion INTEGER,processorCoresAllowed INTEGER,product VARCHAR(75) null,productVersion INTEGER,serversAllowed INTEGER,serversUsed INTEGER,startDate DATE null,endDate DATE null,supportStartDate DATE null,supportEndDate DATE null,active_ BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table OSBLCS_LCSSubscriptionEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY lcsSubscriptionEntry.lcsSubscriptionEntryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OSBLCS_LCSSubscriptionEntry.lcsSubscriptionEntryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.osb.lcs.model.LCSSubscriptionEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.osb.lcs.model.LCSSubscriptionEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.osb.lcs.model.LCSSubscriptionEntry"),
			true);
	public static final long ACTIVE_COLUMN_BITMASK = 1L;
	public static final long LCSPROJECTID_COLUMN_BITMASK = 2L;
	public static final long TYPE_COLUMN_BITMASK = 4L;
	public static final long LCSSUBSCRIPTIONENTRYID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LCSSubscriptionEntry toModel(
		LCSSubscriptionEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LCSSubscriptionEntry model = new LCSSubscriptionEntryImpl();

		model.setLcsSubscriptionEntryId(soapModel.getLcsSubscriptionEntryId());
		model.setLcsProjectId(soapModel.getLcsProjectId());
		model.setActualPrice(soapModel.getActualPrice());
		model.setCurrencyCode(soapModel.getCurrencyCode());
		model.setInstanceSize(soapModel.getInstanceSize());
		model.setType(soapModel.getType());
		model.setPlatform(soapModel.getPlatform());
		model.setPlatformVersion(soapModel.getPlatformVersion());
		model.setProcessorCoresAllowed(soapModel.getProcessorCoresAllowed());
		model.setProduct(soapModel.getProduct());
		model.setProductVersion(soapModel.getProductVersion());
		model.setServersAllowed(soapModel.getServersAllowed());
		model.setServersUsed(soapModel.getServersUsed());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setSupportStartDate(soapModel.getSupportStartDate());
		model.setSupportEndDate(soapModel.getSupportEndDate());
		model.setActive(soapModel.getActive());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LCSSubscriptionEntry> toModels(
		LCSSubscriptionEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LCSSubscriptionEntry> models = new ArrayList<LCSSubscriptionEntry>(soapModels.length);

		for (LCSSubscriptionEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.osb.lcs.model.LCSSubscriptionEntry"));

	public LCSSubscriptionEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lcsSubscriptionEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLcsSubscriptionEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lcsSubscriptionEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LCSSubscriptionEntry.class;
	}

	@Override
	public String getModelClassName() {
		return LCSSubscriptionEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("lcsSubscriptionEntryId", getLcsSubscriptionEntryId());
		attributes.put("lcsProjectId", getLcsProjectId());
		attributes.put("actualPrice", getActualPrice());
		attributes.put("currencyCode", getCurrencyCode());
		attributes.put("instanceSize", getInstanceSize());
		attributes.put("type", getType());
		attributes.put("platform", getPlatform());
		attributes.put("platformVersion", getPlatformVersion());
		attributes.put("processorCoresAllowed", getProcessorCoresAllowed());
		attributes.put("product", getProduct());
		attributes.put("productVersion", getProductVersion());
		attributes.put("serversAllowed", getServersAllowed());
		attributes.put("serversUsed", getServersUsed());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("supportStartDate", getSupportStartDate());
		attributes.put("supportEndDate", getSupportEndDate());
		attributes.put("active", getActive());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long lcsSubscriptionEntryId = (Long)attributes.get(
				"lcsSubscriptionEntryId");

		if (lcsSubscriptionEntryId != null) {
			setLcsSubscriptionEntryId(lcsSubscriptionEntryId);
		}

		Long lcsProjectId = (Long)attributes.get("lcsProjectId");

		if (lcsProjectId != null) {
			setLcsProjectId(lcsProjectId);
		}

		Double actualPrice = (Double)attributes.get("actualPrice");

		if (actualPrice != null) {
			setActualPrice(actualPrice);
		}

		String currencyCode = (String)attributes.get("currencyCode");

		if (currencyCode != null) {
			setCurrencyCode(currencyCode);
		}

		Integer instanceSize = (Integer)attributes.get("instanceSize");

		if (instanceSize != null) {
			setInstanceSize(instanceSize);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String platform = (String)attributes.get("platform");

		if (platform != null) {
			setPlatform(platform);
		}

		Integer platformVersion = (Integer)attributes.get("platformVersion");

		if (platformVersion != null) {
			setPlatformVersion(platformVersion);
		}

		Integer processorCoresAllowed = (Integer)attributes.get(
				"processorCoresAllowed");

		if (processorCoresAllowed != null) {
			setProcessorCoresAllowed(processorCoresAllowed);
		}

		String product = (String)attributes.get("product");

		if (product != null) {
			setProduct(product);
		}

		Integer productVersion = (Integer)attributes.get("productVersion");

		if (productVersion != null) {
			setProductVersion(productVersion);
		}

		Integer serversAllowed = (Integer)attributes.get("serversAllowed");

		if (serversAllowed != null) {
			setServersAllowed(serversAllowed);
		}

		Integer serversUsed = (Integer)attributes.get("serversUsed");

		if (serversUsed != null) {
			setServersUsed(serversUsed);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Date supportStartDate = (Date)attributes.get("supportStartDate");

		if (supportStartDate != null) {
			setSupportStartDate(supportStartDate);
		}

		Date supportEndDate = (Date)attributes.get("supportEndDate");

		if (supportEndDate != null) {
			setSupportEndDate(supportEndDate);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}
	}

	@JSON
	@Override
	public long getLcsSubscriptionEntryId() {
		return _lcsSubscriptionEntryId;
	}

	@Override
	public void setLcsSubscriptionEntryId(long lcsSubscriptionEntryId) {
		_lcsSubscriptionEntryId = lcsSubscriptionEntryId;
	}

	@JSON
	@Override
	public long getLcsProjectId() {
		return _lcsProjectId;
	}

	@Override
	public void setLcsProjectId(long lcsProjectId) {
		_columnBitmask |= LCSPROJECTID_COLUMN_BITMASK;

		if (!_setOriginalLcsProjectId) {
			_setOriginalLcsProjectId = true;

			_originalLcsProjectId = _lcsProjectId;
		}

		_lcsProjectId = lcsProjectId;
	}

	public long getOriginalLcsProjectId() {
		return _originalLcsProjectId;
	}

	@JSON
	@Override
	public double getActualPrice() {
		return _actualPrice;
	}

	@Override
	public void setActualPrice(double actualPrice) {
		_actualPrice = actualPrice;
	}

	@JSON
	@Override
	public String getCurrencyCode() {
		return _currencyCode;
	}

	@Override
	public void setCurrencyCode(String currencyCode) {
		_currencyCode = currencyCode;
	}

	@JSON
	@Override
	public int getInstanceSize() {
		return _instanceSize;
	}

	@Override
	public void setInstanceSize(int instanceSize) {
		_instanceSize = instanceSize;
	}

	@JSON
	@Override
	public String getType() {
		return _type;
	}

	@Override
	public void setType(String type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return _originalType;
	}

	@JSON
	@Override
	public String getPlatform() {
		return _platform;
	}

	@Override
	public void setPlatform(String platform) {
		_platform = platform;
	}

	@JSON
	@Override
	public int getPlatformVersion() {
		return _platformVersion;
	}

	@Override
	public void setPlatformVersion(int platformVersion) {
		_platformVersion = platformVersion;
	}

	@JSON
	@Override
	public int getProcessorCoresAllowed() {
		return _processorCoresAllowed;
	}

	@Override
	public void setProcessorCoresAllowed(int processorCoresAllowed) {
		_processorCoresAllowed = processorCoresAllowed;
	}

	@JSON
	@Override
	public String getProduct() {
		return _product;
	}

	@Override
	public void setProduct(String product) {
		_product = product;
	}

	@JSON
	@Override
	public int getProductVersion() {
		return _productVersion;
	}

	@Override
	public void setProductVersion(int productVersion) {
		_productVersion = productVersion;
	}

	@JSON
	@Override
	public int getServersAllowed() {
		return _serversAllowed;
	}

	@Override
	public void setServersAllowed(int serversAllowed) {
		_serversAllowed = serversAllowed;
	}

	@JSON
	@Override
	public int getServersUsed() {
		return _serversUsed;
	}

	@Override
	public void setServersUsed(int serversUsed) {
		_serversUsed = serversUsed;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public Date getSupportStartDate() {
		return _supportStartDate;
	}

	@Override
	public void setSupportStartDate(Date supportStartDate) {
		_supportStartDate = supportStartDate;
	}

	@JSON
	@Override
	public Date getSupportEndDate() {
		return _supportEndDate;
	}

	@Override
	public void setSupportEndDate(Date supportEndDate) {
		_supportEndDate = supportEndDate;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_columnBitmask |= ACTIVE_COLUMN_BITMASK;

		if (!_setOriginalActive) {
			_setOriginalActive = true;

			_originalActive = _active;
		}

		_active = active;
	}

	public boolean getOriginalActive() {
		return _originalActive;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LCSSubscriptionEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LCSSubscriptionEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LCSSubscriptionEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LCSSubscriptionEntryImpl lcsSubscriptionEntryImpl = new LCSSubscriptionEntryImpl();

		lcsSubscriptionEntryImpl.setLcsSubscriptionEntryId(getLcsSubscriptionEntryId());
		lcsSubscriptionEntryImpl.setLcsProjectId(getLcsProjectId());
		lcsSubscriptionEntryImpl.setActualPrice(getActualPrice());
		lcsSubscriptionEntryImpl.setCurrencyCode(getCurrencyCode());
		lcsSubscriptionEntryImpl.setInstanceSize(getInstanceSize());
		lcsSubscriptionEntryImpl.setType(getType());
		lcsSubscriptionEntryImpl.setPlatform(getPlatform());
		lcsSubscriptionEntryImpl.setPlatformVersion(getPlatformVersion());
		lcsSubscriptionEntryImpl.setProcessorCoresAllowed(getProcessorCoresAllowed());
		lcsSubscriptionEntryImpl.setProduct(getProduct());
		lcsSubscriptionEntryImpl.setProductVersion(getProductVersion());
		lcsSubscriptionEntryImpl.setServersAllowed(getServersAllowed());
		lcsSubscriptionEntryImpl.setServersUsed(getServersUsed());
		lcsSubscriptionEntryImpl.setStartDate(getStartDate());
		lcsSubscriptionEntryImpl.setEndDate(getEndDate());
		lcsSubscriptionEntryImpl.setSupportStartDate(getSupportStartDate());
		lcsSubscriptionEntryImpl.setSupportEndDate(getSupportEndDate());
		lcsSubscriptionEntryImpl.setActive(getActive());

		lcsSubscriptionEntryImpl.resetOriginalValues();

		return lcsSubscriptionEntryImpl;
	}

	@Override
	public int compareTo(LCSSubscriptionEntry lcsSubscriptionEntry) {
		long primaryKey = lcsSubscriptionEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LCSSubscriptionEntry)) {
			return false;
		}

		LCSSubscriptionEntry lcsSubscriptionEntry = (LCSSubscriptionEntry)obj;

		long primaryKey = lcsSubscriptionEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LCSSubscriptionEntryModelImpl lcsSubscriptionEntryModelImpl = this;

		lcsSubscriptionEntryModelImpl._originalLcsProjectId = lcsSubscriptionEntryModelImpl._lcsProjectId;

		lcsSubscriptionEntryModelImpl._setOriginalLcsProjectId = false;

		lcsSubscriptionEntryModelImpl._originalType = lcsSubscriptionEntryModelImpl._type;

		lcsSubscriptionEntryModelImpl._originalActive = lcsSubscriptionEntryModelImpl._active;

		lcsSubscriptionEntryModelImpl._setOriginalActive = false;

		lcsSubscriptionEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LCSSubscriptionEntry> toCacheModel() {
		LCSSubscriptionEntryCacheModel lcsSubscriptionEntryCacheModel = new LCSSubscriptionEntryCacheModel();

		lcsSubscriptionEntryCacheModel.lcsSubscriptionEntryId = getLcsSubscriptionEntryId();

		lcsSubscriptionEntryCacheModel.lcsProjectId = getLcsProjectId();

		lcsSubscriptionEntryCacheModel.actualPrice = getActualPrice();

		lcsSubscriptionEntryCacheModel.currencyCode = getCurrencyCode();

		String currencyCode = lcsSubscriptionEntryCacheModel.currencyCode;

		if ((currencyCode != null) && (currencyCode.length() == 0)) {
			lcsSubscriptionEntryCacheModel.currencyCode = null;
		}

		lcsSubscriptionEntryCacheModel.instanceSize = getInstanceSize();

		lcsSubscriptionEntryCacheModel.type = getType();

		String type = lcsSubscriptionEntryCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			lcsSubscriptionEntryCacheModel.type = null;
		}

		lcsSubscriptionEntryCacheModel.platform = getPlatform();

		String platform = lcsSubscriptionEntryCacheModel.platform;

		if ((platform != null) && (platform.length() == 0)) {
			lcsSubscriptionEntryCacheModel.platform = null;
		}

		lcsSubscriptionEntryCacheModel.platformVersion = getPlatformVersion();

		lcsSubscriptionEntryCacheModel.processorCoresAllowed = getProcessorCoresAllowed();

		lcsSubscriptionEntryCacheModel.product = getProduct();

		String product = lcsSubscriptionEntryCacheModel.product;

		if ((product != null) && (product.length() == 0)) {
			lcsSubscriptionEntryCacheModel.product = null;
		}

		lcsSubscriptionEntryCacheModel.productVersion = getProductVersion();

		lcsSubscriptionEntryCacheModel.serversAllowed = getServersAllowed();

		lcsSubscriptionEntryCacheModel.serversUsed = getServersUsed();

		Date startDate = getStartDate();

		if (startDate != null) {
			lcsSubscriptionEntryCacheModel.startDate = startDate.getTime();
		}
		else {
			lcsSubscriptionEntryCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			lcsSubscriptionEntryCacheModel.endDate = endDate.getTime();
		}
		else {
			lcsSubscriptionEntryCacheModel.endDate = Long.MIN_VALUE;
		}

		Date supportStartDate = getSupportStartDate();

		if (supportStartDate != null) {
			lcsSubscriptionEntryCacheModel.supportStartDate = supportStartDate.getTime();
		}
		else {
			lcsSubscriptionEntryCacheModel.supportStartDate = Long.MIN_VALUE;
		}

		Date supportEndDate = getSupportEndDate();

		if (supportEndDate != null) {
			lcsSubscriptionEntryCacheModel.supportEndDate = supportEndDate.getTime();
		}
		else {
			lcsSubscriptionEntryCacheModel.supportEndDate = Long.MIN_VALUE;
		}

		lcsSubscriptionEntryCacheModel.active = getActive();

		return lcsSubscriptionEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{lcsSubscriptionEntryId=");
		sb.append(getLcsSubscriptionEntryId());
		sb.append(", lcsProjectId=");
		sb.append(getLcsProjectId());
		sb.append(", actualPrice=");
		sb.append(getActualPrice());
		sb.append(", currencyCode=");
		sb.append(getCurrencyCode());
		sb.append(", instanceSize=");
		sb.append(getInstanceSize());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", platform=");
		sb.append(getPlatform());
		sb.append(", platformVersion=");
		sb.append(getPlatformVersion());
		sb.append(", processorCoresAllowed=");
		sb.append(getProcessorCoresAllowed());
		sb.append(", product=");
		sb.append(getProduct());
		sb.append(", productVersion=");
		sb.append(getProductVersion());
		sb.append(", serversAllowed=");
		sb.append(getServersAllowed());
		sb.append(", serversUsed=");
		sb.append(getServersUsed());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", supportStartDate=");
		sb.append(getSupportStartDate());
		sb.append(", supportEndDate=");
		sb.append(getSupportEndDate());
		sb.append(", active=");
		sb.append(getActive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.liferay.osb.lcs.model.LCSSubscriptionEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>lcsSubscriptionEntryId</column-name><column-value><![CDATA[");
		sb.append(getLcsSubscriptionEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lcsProjectId</column-name><column-value><![CDATA[");
		sb.append(getLcsProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualPrice</column-name><column-value><![CDATA[");
		sb.append(getActualPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currencyCode</column-name><column-value><![CDATA[");
		sb.append(getCurrencyCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>instanceSize</column-name><column-value><![CDATA[");
		sb.append(getInstanceSize());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>platform</column-name><column-value><![CDATA[");
		sb.append(getPlatform());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>platformVersion</column-name><column-value><![CDATA[");
		sb.append(getPlatformVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processorCoresAllowed</column-name><column-value><![CDATA[");
		sb.append(getProcessorCoresAllowed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>product</column-name><column-value><![CDATA[");
		sb.append(getProduct());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productVersion</column-name><column-value><![CDATA[");
		sb.append(getProductVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serversAllowed</column-name><column-value><![CDATA[");
		sb.append(getServersAllowed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serversUsed</column-name><column-value><![CDATA[");
		sb.append(getServersUsed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>supportStartDate</column-name><column-value><![CDATA[");
		sb.append(getSupportStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>supportEndDate</column-name><column-value><![CDATA[");
		sb.append(getSupportEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LCSSubscriptionEntry.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LCSSubscriptionEntry.class
		};
	private long _lcsSubscriptionEntryId;
	private long _lcsProjectId;
	private long _originalLcsProjectId;
	private boolean _setOriginalLcsProjectId;
	private double _actualPrice;
	private String _currencyCode;
	private int _instanceSize;
	private String _type;
	private String _originalType;
	private String _platform;
	private int _platformVersion;
	private int _processorCoresAllowed;
	private String _product;
	private int _productVersion;
	private int _serversAllowed;
	private int _serversUsed;
	private Date _startDate;
	private Date _endDate;
	private Date _supportStartDate;
	private Date _supportEndDate;
	private boolean _active;
	private boolean _originalActive;
	private boolean _setOriginalActive;
	private long _columnBitmask;
	private LCSSubscriptionEntry _escapedModel;
}