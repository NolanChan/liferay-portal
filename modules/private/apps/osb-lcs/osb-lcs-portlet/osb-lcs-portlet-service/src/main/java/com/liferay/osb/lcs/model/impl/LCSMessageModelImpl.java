/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osb.lcs.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.osb.lcs.model.LCSMessage;
import com.liferay.osb.lcs.model.LCSMessageModel;
import com.liferay.osb.lcs.model.LCSMessageSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LCSMessage service. Represents a row in the &quot;OSBLCS_LCSMessage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LCSMessageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LCSMessageImpl}.
 * </p>
 *
 * @author Igor Beslic
 * @see LCSMessageImpl
 * @see LCSMessage
 * @see LCSMessageModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LCSMessageModelImpl extends BaseModelImpl<LCSMessage>
	implements LCSMessageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a l c s message model instance should use the {@link LCSMessage} interface instead.
	 */
	public static final String TABLE_NAME = "OSBLCS_LCSMessage";
	public static final Object[][] TABLE_COLUMNS = {
			{ "lcsMessageId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "sourceMessageId", Types.BIGINT },
			{ "sourceSystemName", Types.VARCHAR },
			{ "classNameId", Types.BIGINT },
			{ "classPK", Types.BIGINT },
			{ "content", Types.VARCHAR },
			{ "endDate", Types.TIMESTAMP },
			{ "global", Types.BOOLEAN },
			{ "severityLevel", Types.INTEGER },
			{ "type_", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("lcsMessageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("sourceMessageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sourceSystemName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("classNameId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("global", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("severityLevel", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("type_", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table OSBLCS_LCSMessage (lcsMessageId LONG not null primary key,createDate DATE null,modifiedDate DATE null,sourceMessageId LONG,sourceSystemName VARCHAR(75) null,classNameId LONG,classPK LONG,content VARCHAR(75) null,endDate DATE null,global BOOLEAN,severityLevel INTEGER,type_ INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table OSBLCS_LCSMessage";
	public static final String ORDER_BY_JPQL = " ORDER BY lcsMessage.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY OSBLCS_LCSMessage.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.osb.lcs.model.LCSMessage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.osb.lcs.model.LCSMessage"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.osb.lcs.model.LCSMessage"),
			true);
	public static final long CLASSNAMEID_COLUMN_BITMASK = 1L;
	public static final long CLASSPK_COLUMN_BITMASK = 2L;
	public static final long ENDDATE_COLUMN_BITMASK = 4L;
	public static final long GLOBAL_COLUMN_BITMASK = 8L;
	public static final long SOURCEMESSAGEID_COLUMN_BITMASK = 16L;
	public static final long SOURCESYSTEMNAME_COLUMN_BITMASK = 32L;
	public static final long TYPE_COLUMN_BITMASK = 64L;
	public static final long CREATEDATE_COLUMN_BITMASK = 128L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LCSMessage toModel(LCSMessageSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LCSMessage model = new LCSMessageImpl();

		model.setLcsMessageId(soapModel.getLcsMessageId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setSourceMessageId(soapModel.getSourceMessageId());
		model.setSourceSystemName(soapModel.getSourceSystemName());
		model.setClassNameId(soapModel.getClassNameId());
		model.setClassPK(soapModel.getClassPK());
		model.setContent(soapModel.getContent());
		model.setEndDate(soapModel.getEndDate());
		model.setGlobal(soapModel.getGlobal());
		model.setSeverityLevel(soapModel.getSeverityLevel());
		model.setType(soapModel.getType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LCSMessage> toModels(LCSMessageSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LCSMessage> models = new ArrayList<LCSMessage>(soapModels.length);

		for (LCSMessageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.osb.lcs.model.LCSMessage"));

	public LCSMessageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lcsMessageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLcsMessageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lcsMessageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LCSMessage.class;
	}

	@Override
	public String getModelClassName() {
		return LCSMessage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("lcsMessageId", getLcsMessageId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("sourceMessageId", getSourceMessageId());
		attributes.put("sourceSystemName", getSourceSystemName());
		attributes.put("classNameId", getClassNameId());
		attributes.put("classPK", getClassPK());
		attributes.put("content", getContent());
		attributes.put("endDate", getEndDate());
		attributes.put("global", getGlobal());
		attributes.put("severityLevel", getSeverityLevel());
		attributes.put("type", getType());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long lcsMessageId = (Long)attributes.get("lcsMessageId");

		if (lcsMessageId != null) {
			setLcsMessageId(lcsMessageId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long sourceMessageId = (Long)attributes.get("sourceMessageId");

		if (sourceMessageId != null) {
			setSourceMessageId(sourceMessageId);
		}

		String sourceSystemName = (String)attributes.get("sourceSystemName");

		if (sourceSystemName != null) {
			setSourceSystemName(sourceSystemName);
		}

		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Boolean global = (Boolean)attributes.get("global");

		if (global != null) {
			setGlobal(global);
		}

		Integer severityLevel = (Integer)attributes.get("severityLevel");

		if (severityLevel != null) {
			setSeverityLevel(severityLevel);
		}

		Integer type = (Integer)attributes.get("type");

		if (type != null) {
			setType(type);
		}
	}

	@JSON
	@Override
	public long getLcsMessageId() {
		return _lcsMessageId;
	}

	@Override
	public void setLcsMessageId(long lcsMessageId) {
		_lcsMessageId = lcsMessageId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getSourceMessageId() {
		return _sourceMessageId;
	}

	@Override
	public void setSourceMessageId(long sourceMessageId) {
		_columnBitmask |= SOURCEMESSAGEID_COLUMN_BITMASK;

		if (!_setOriginalSourceMessageId) {
			_setOriginalSourceMessageId = true;

			_originalSourceMessageId = _sourceMessageId;
		}

		_sourceMessageId = sourceMessageId;
	}

	public long getOriginalSourceMessageId() {
		return _originalSourceMessageId;
	}

	@JSON
	@Override
	public String getSourceSystemName() {
		if (_sourceSystemName == null) {
			return StringPool.BLANK;
		}
		else {
			return _sourceSystemName;
		}
	}

	@Override
	public void setSourceSystemName(String sourceSystemName) {
		_columnBitmask |= SOURCESYSTEMNAME_COLUMN_BITMASK;

		if (_originalSourceSystemName == null) {
			_originalSourceSystemName = _sourceSystemName;
		}

		_sourceSystemName = sourceSystemName;
	}

	public String getOriginalSourceSystemName() {
		return GetterUtil.getString(_originalSourceSystemName);
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@JSON
	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = _classNameId;
		}

		_classNameId = classNameId;
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	@JSON
	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_columnBitmask |= ENDDATE_COLUMN_BITMASK;

		if (_originalEndDate == null) {
			_originalEndDate = _endDate;
		}

		_endDate = endDate;
	}

	public Date getOriginalEndDate() {
		return _originalEndDate;
	}

	@JSON
	@Override
	public boolean getGlobal() {
		return _global;
	}

	@JSON
	@Override
	public boolean isGlobal() {
		return _global;
	}

	@Override
	public void setGlobal(boolean global) {
		_columnBitmask |= GLOBAL_COLUMN_BITMASK;

		if (!_setOriginalGlobal) {
			_setOriginalGlobal = true;

			_originalGlobal = _global;
		}

		_global = global;
	}

	public boolean getOriginalGlobal() {
		return _originalGlobal;
	}

	@JSON
	@Override
	public int getSeverityLevel() {
		return _severityLevel;
	}

	@Override
	public void setSeverityLevel(int severityLevel) {
		_severityLevel = severityLevel;
	}

	@JSON
	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (!_setOriginalType) {
			_setOriginalType = true;

			_originalType = _type;
		}

		_type = type;
	}

	public int getOriginalType() {
		return _originalType;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LCSMessage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LCSMessage toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LCSMessage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LCSMessageImpl lcsMessageImpl = new LCSMessageImpl();

		lcsMessageImpl.setLcsMessageId(getLcsMessageId());
		lcsMessageImpl.setCreateDate(getCreateDate());
		lcsMessageImpl.setModifiedDate(getModifiedDate());
		lcsMessageImpl.setSourceMessageId(getSourceMessageId());
		lcsMessageImpl.setSourceSystemName(getSourceSystemName());
		lcsMessageImpl.setClassNameId(getClassNameId());
		lcsMessageImpl.setClassPK(getClassPK());
		lcsMessageImpl.setContent(getContent());
		lcsMessageImpl.setEndDate(getEndDate());
		lcsMessageImpl.setGlobal(getGlobal());
		lcsMessageImpl.setSeverityLevel(getSeverityLevel());
		lcsMessageImpl.setType(getType());

		lcsMessageImpl.resetOriginalValues();

		return lcsMessageImpl;
	}

	@Override
	public int compareTo(LCSMessage lcsMessage) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), lcsMessage.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LCSMessage)) {
			return false;
		}

		LCSMessage lcsMessage = (LCSMessage)obj;

		long primaryKey = lcsMessage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LCSMessageModelImpl lcsMessageModelImpl = this;

		lcsMessageModelImpl._setModifiedDate = false;

		lcsMessageModelImpl._originalSourceMessageId = lcsMessageModelImpl._sourceMessageId;

		lcsMessageModelImpl._setOriginalSourceMessageId = false;

		lcsMessageModelImpl._originalSourceSystemName = lcsMessageModelImpl._sourceSystemName;

		lcsMessageModelImpl._originalClassNameId = lcsMessageModelImpl._classNameId;

		lcsMessageModelImpl._setOriginalClassNameId = false;

		lcsMessageModelImpl._originalClassPK = lcsMessageModelImpl._classPK;

		lcsMessageModelImpl._setOriginalClassPK = false;

		lcsMessageModelImpl._originalEndDate = lcsMessageModelImpl._endDate;

		lcsMessageModelImpl._originalGlobal = lcsMessageModelImpl._global;

		lcsMessageModelImpl._setOriginalGlobal = false;

		lcsMessageModelImpl._originalType = lcsMessageModelImpl._type;

		lcsMessageModelImpl._setOriginalType = false;

		lcsMessageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LCSMessage> toCacheModel() {
		LCSMessageCacheModel lcsMessageCacheModel = new LCSMessageCacheModel();

		lcsMessageCacheModel.lcsMessageId = getLcsMessageId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			lcsMessageCacheModel.createDate = createDate.getTime();
		}
		else {
			lcsMessageCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			lcsMessageCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			lcsMessageCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		lcsMessageCacheModel.sourceMessageId = getSourceMessageId();

		lcsMessageCacheModel.sourceSystemName = getSourceSystemName();

		String sourceSystemName = lcsMessageCacheModel.sourceSystemName;

		if ((sourceSystemName != null) && (sourceSystemName.length() == 0)) {
			lcsMessageCacheModel.sourceSystemName = null;
		}

		lcsMessageCacheModel.classNameId = getClassNameId();

		lcsMessageCacheModel.classPK = getClassPK();

		lcsMessageCacheModel.content = getContent();

		String content = lcsMessageCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			lcsMessageCacheModel.content = null;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			lcsMessageCacheModel.endDate = endDate.getTime();
		}
		else {
			lcsMessageCacheModel.endDate = Long.MIN_VALUE;
		}

		lcsMessageCacheModel.global = getGlobal();

		lcsMessageCacheModel.severityLevel = getSeverityLevel();

		lcsMessageCacheModel.type = getType();

		return lcsMessageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{lcsMessageId=");
		sb.append(getLcsMessageId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", sourceMessageId=");
		sb.append(getSourceMessageId());
		sb.append(", sourceSystemName=");
		sb.append(getSourceSystemName());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", global=");
		sb.append(getGlobal());
		sb.append(", severityLevel=");
		sb.append(getSeverityLevel());
		sb.append(", type=");
		sb.append(getType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.liferay.osb.lcs.model.LCSMessage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>lcsMessageId</column-name><column-value><![CDATA[");
		sb.append(getLcsMessageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sourceMessageId</column-name><column-value><![CDATA[");
		sb.append(getSourceMessageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sourceSystemName</column-name><column-value><![CDATA[");
		sb.append(getSourceSystemName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>global</column-name><column-value><![CDATA[");
		sb.append(getGlobal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>severityLevel</column-name><column-value><![CDATA[");
		sb.append(getSeverityLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LCSMessage.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LCSMessage.class
		};
	private long _lcsMessageId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _sourceMessageId;
	private long _originalSourceMessageId;
	private boolean _setOriginalSourceMessageId;
	private String _sourceSystemName;
	private String _originalSourceSystemName;
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private String _content;
	private Date _endDate;
	private Date _originalEndDate;
	private boolean _global;
	private boolean _originalGlobal;
	private boolean _setOriginalGlobal;
	private int _severityLevel;
	private int _type;
	private int _originalType;
	private boolean _setOriginalType;
	private long _columnBitmask;
	private LCSMessage _escapedModel;
}