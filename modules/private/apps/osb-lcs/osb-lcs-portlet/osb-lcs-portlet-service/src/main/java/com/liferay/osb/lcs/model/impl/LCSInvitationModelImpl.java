/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osb.lcs.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.osb.lcs.model.LCSInvitation;
import com.liferay.osb.lcs.model.LCSInvitationModel;
import com.liferay.osb.lcs.model.LCSInvitationSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LCSInvitation service. Represents a row in the &quot;OSBLCS_LCSInvitation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LCSInvitationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LCSInvitationImpl}.
 * </p>
 *
 * @author Igor Beslic
 * @see LCSInvitationImpl
 * @see LCSInvitation
 * @see LCSInvitationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LCSInvitationModelImpl extends BaseModelImpl<LCSInvitation>
	implements LCSInvitationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a l c s invitation model instance should use the {@link LCSInvitation} interface instead.
	 */
	public static final String TABLE_NAME = "OSBLCS_LCSInvitation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "lcsInvitationId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "lcsProjectId", Types.BIGINT },
			{ "emailAddress", Types.VARCHAR },
			{ "lcsClusterEntryId", Types.BIGINT },
			{ "role", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("lcsInvitationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lcsProjectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lcsClusterEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("role", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table OSBLCS_LCSInvitation (lcsInvitationId LONG not null primary key,userId LONG,createDate DATE null,lcsProjectId LONG,emailAddress VARCHAR(75) null,lcsClusterEntryId LONG,role INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table OSBLCS_LCSInvitation";
	public static final String ORDER_BY_JPQL = " ORDER BY lcsInvitation.lcsProjectId DESC, lcsInvitation.emailAddress DESC";
	public static final String ORDER_BY_SQL = " ORDER BY OSBLCS_LCSInvitation.lcsProjectId DESC, OSBLCS_LCSInvitation.emailAddress DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.osb.lcs.model.LCSInvitation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.osb.lcs.model.LCSInvitation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.osb.lcs.model.LCSInvitation"),
			true);
	public static final long EMAILADDRESS_COLUMN_BITMASK = 1L;
	public static final long LCSPROJECTID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LCSInvitation toModel(LCSInvitationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LCSInvitation model = new LCSInvitationImpl();

		model.setLcsInvitationId(soapModel.getLcsInvitationId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setLcsProjectId(soapModel.getLcsProjectId());
		model.setEmailAddress(soapModel.getEmailAddress());
		model.setLcsClusterEntryId(soapModel.getLcsClusterEntryId());
		model.setRole(soapModel.getRole());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LCSInvitation> toModels(LCSInvitationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LCSInvitation> models = new ArrayList<LCSInvitation>(soapModels.length);

		for (LCSInvitationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.osb.lcs.model.LCSInvitation"));

	public LCSInvitationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lcsInvitationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLcsInvitationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lcsInvitationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LCSInvitation.class;
	}

	@Override
	public String getModelClassName() {
		return LCSInvitation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("lcsInvitationId", getLcsInvitationId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("lcsProjectId", getLcsProjectId());
		attributes.put("emailAddress", getEmailAddress());
		attributes.put("lcsClusterEntryId", getLcsClusterEntryId());
		attributes.put("role", getRole());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long lcsInvitationId = (Long)attributes.get("lcsInvitationId");

		if (lcsInvitationId != null) {
			setLcsInvitationId(lcsInvitationId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long lcsProjectId = (Long)attributes.get("lcsProjectId");

		if (lcsProjectId != null) {
			setLcsProjectId(lcsProjectId);
		}

		String emailAddress = (String)attributes.get("emailAddress");

		if (emailAddress != null) {
			setEmailAddress(emailAddress);
		}

		Long lcsClusterEntryId = (Long)attributes.get("lcsClusterEntryId");

		if (lcsClusterEntryId != null) {
			setLcsClusterEntryId(lcsClusterEntryId);
		}

		Integer role = (Integer)attributes.get("role");

		if (role != null) {
			setRole(role);
		}
	}

	@JSON
	@Override
	public long getLcsInvitationId() {
		return _lcsInvitationId;
	}

	@Override
	public void setLcsInvitationId(long lcsInvitationId) {
		_lcsInvitationId = lcsInvitationId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public long getLcsProjectId() {
		return _lcsProjectId;
	}

	@Override
	public void setLcsProjectId(long lcsProjectId) {
		_columnBitmask = -1L;

		if (!_setOriginalLcsProjectId) {
			_setOriginalLcsProjectId = true;

			_originalLcsProjectId = _lcsProjectId;
		}

		_lcsProjectId = lcsProjectId;
	}

	public long getOriginalLcsProjectId() {
		return _originalLcsProjectId;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_columnBitmask = -1L;

		if (_originalEmailAddress == null) {
			_originalEmailAddress = _emailAddress;
		}

		_emailAddress = emailAddress;
	}

	public String getOriginalEmailAddress() {
		return GetterUtil.getString(_originalEmailAddress);
	}

	@JSON
	@Override
	public long getLcsClusterEntryId() {
		return _lcsClusterEntryId;
	}

	@Override
	public void setLcsClusterEntryId(long lcsClusterEntryId) {
		_lcsClusterEntryId = lcsClusterEntryId;
	}

	@JSON
	@Override
	public int getRole() {
		return _role;
	}

	@Override
	public void setRole(int role) {
		_role = role;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LCSInvitation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LCSInvitation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LCSInvitation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LCSInvitationImpl lcsInvitationImpl = new LCSInvitationImpl();

		lcsInvitationImpl.setLcsInvitationId(getLcsInvitationId());
		lcsInvitationImpl.setUserId(getUserId());
		lcsInvitationImpl.setCreateDate(getCreateDate());
		lcsInvitationImpl.setLcsProjectId(getLcsProjectId());
		lcsInvitationImpl.setEmailAddress(getEmailAddress());
		lcsInvitationImpl.setLcsClusterEntryId(getLcsClusterEntryId());
		lcsInvitationImpl.setRole(getRole());

		lcsInvitationImpl.resetOriginalValues();

		return lcsInvitationImpl;
	}

	@Override
	public int compareTo(LCSInvitation lcsInvitation) {
		int value = 0;

		if (getLcsProjectId() < lcsInvitation.getLcsProjectId()) {
			value = -1;
		}
		else if (getLcsProjectId() > lcsInvitation.getLcsProjectId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = getEmailAddress().compareTo(lcsInvitation.getEmailAddress());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LCSInvitation)) {
			return false;
		}

		LCSInvitation lcsInvitation = (LCSInvitation)obj;

		long primaryKey = lcsInvitation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LCSInvitationModelImpl lcsInvitationModelImpl = this;

		lcsInvitationModelImpl._originalLcsProjectId = lcsInvitationModelImpl._lcsProjectId;

		lcsInvitationModelImpl._setOriginalLcsProjectId = false;

		lcsInvitationModelImpl._originalEmailAddress = lcsInvitationModelImpl._emailAddress;

		lcsInvitationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LCSInvitation> toCacheModel() {
		LCSInvitationCacheModel lcsInvitationCacheModel = new LCSInvitationCacheModel();

		lcsInvitationCacheModel.lcsInvitationId = getLcsInvitationId();

		lcsInvitationCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			lcsInvitationCacheModel.createDate = createDate.getTime();
		}
		else {
			lcsInvitationCacheModel.createDate = Long.MIN_VALUE;
		}

		lcsInvitationCacheModel.lcsProjectId = getLcsProjectId();

		lcsInvitationCacheModel.emailAddress = getEmailAddress();

		String emailAddress = lcsInvitationCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			lcsInvitationCacheModel.emailAddress = null;
		}

		lcsInvitationCacheModel.lcsClusterEntryId = getLcsClusterEntryId();

		lcsInvitationCacheModel.role = getRole();

		return lcsInvitationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{lcsInvitationId=");
		sb.append(getLcsInvitationId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", lcsProjectId=");
		sb.append(getLcsProjectId());
		sb.append(", emailAddress=");
		sb.append(getEmailAddress());
		sb.append(", lcsClusterEntryId=");
		sb.append(getLcsClusterEntryId());
		sb.append(", role=");
		sb.append(getRole());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.osb.lcs.model.LCSInvitation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>lcsInvitationId</column-name><column-value><![CDATA[");
		sb.append(getLcsInvitationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lcsProjectId</column-name><column-value><![CDATA[");
		sb.append(getLcsProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailAddress</column-name><column-value><![CDATA[");
		sb.append(getEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lcsClusterEntryId</column-name><column-value><![CDATA[");
		sb.append(getLcsClusterEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>role</column-name><column-value><![CDATA[");
		sb.append(getRole());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LCSInvitation.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LCSInvitation.class
		};
	private long _lcsInvitationId;
	private long _userId;
	private Date _createDate;
	private long _lcsProjectId;
	private long _originalLcsProjectId;
	private boolean _setOriginalLcsProjectId;
	private String _emailAddress;
	private String _originalEmailAddress;
	private long _lcsClusterEntryId;
	private int _role;
	private long _columnBitmask;
	private LCSInvitation _escapedModel;
}