/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osb.lcs.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.osb.lcs.model.LCSNotificationAuditEntry;
import com.liferay.osb.lcs.model.LCSNotificationAuditEntryModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LCSNotificationAuditEntry service. Represents a row in the &quot;OSBLCS_LCSNotificationAuditEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LCSNotificationAuditEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LCSNotificationAuditEntryImpl}.
 * </p>
 *
 * @author Igor Beslic
 * @see LCSNotificationAuditEntryImpl
 * @see LCSNotificationAuditEntry
 * @see LCSNotificationAuditEntryModel
 * @generated
 */
@ProviderType
public class LCSNotificationAuditEntryModelImpl extends BaseModelImpl<LCSNotificationAuditEntry>
	implements LCSNotificationAuditEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a l c s notification audit entry model instance should use the {@link LCSNotificationAuditEntry} interface instead.
	 */
	public static final String TABLE_NAME = "OSBLCS_LCSNotificationAuditEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "lcsNotificationAuditEntryId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "lcsClusterNodeId", Types.BIGINT },
			{ "type_", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("lcsNotificationAuditEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lcsClusterNodeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("type_", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table OSBLCS_LCSNotificationAuditEntry (lcsNotificationAuditEntryId LONG not null primary key,userId LONG,createDate DATE null,lcsClusterNodeId LONG,type_ INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table OSBLCS_LCSNotificationAuditEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY lcsNotificationAuditEntry.createDate DESC, lcsNotificationAuditEntry.lcsClusterNodeId DESC";
	public static final String ORDER_BY_SQL = " ORDER BY OSBLCS_LCSNotificationAuditEntry.createDate DESC, OSBLCS_LCSNotificationAuditEntry.lcsClusterNodeId DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.osb.lcs.model.LCSNotificationAuditEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.osb.lcs.model.LCSNotificationAuditEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.osb.lcs.model.LCSNotificationAuditEntry"),
			true);
	public static final long LCSCLUSTERNODEID_COLUMN_BITMASK = 1L;
	public static final long TYPE_COLUMN_BITMASK = 2L;
	public static final long USERID_COLUMN_BITMASK = 4L;
	public static final long CREATEDATE_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.osb.lcs.model.LCSNotificationAuditEntry"));

	public LCSNotificationAuditEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lcsNotificationAuditEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLcsNotificationAuditEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lcsNotificationAuditEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LCSNotificationAuditEntry.class;
	}

	@Override
	public String getModelClassName() {
		return LCSNotificationAuditEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("lcsNotificationAuditEntryId",
			getLcsNotificationAuditEntryId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("lcsClusterNodeId", getLcsClusterNodeId());
		attributes.put("type", getType());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long lcsNotificationAuditEntryId = (Long)attributes.get(
				"lcsNotificationAuditEntryId");

		if (lcsNotificationAuditEntryId != null) {
			setLcsNotificationAuditEntryId(lcsNotificationAuditEntryId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long lcsClusterNodeId = (Long)attributes.get("lcsClusterNodeId");

		if (lcsClusterNodeId != null) {
			setLcsClusterNodeId(lcsClusterNodeId);
		}

		Integer type = (Integer)attributes.get("type");

		if (type != null) {
			setType(type);
		}
	}

	@Override
	public long getLcsNotificationAuditEntryId() {
		return _lcsNotificationAuditEntryId;
	}

	@Override
	public void setLcsNotificationAuditEntryId(long lcsNotificationAuditEntryId) {
		_lcsNotificationAuditEntryId = lcsNotificationAuditEntryId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public long getLcsClusterNodeId() {
		return _lcsClusterNodeId;
	}

	@Override
	public void setLcsClusterNodeId(long lcsClusterNodeId) {
		_columnBitmask = -1L;

		if (!_setOriginalLcsClusterNodeId) {
			_setOriginalLcsClusterNodeId = true;

			_originalLcsClusterNodeId = _lcsClusterNodeId;
		}

		_lcsClusterNodeId = lcsClusterNodeId;
	}

	public long getOriginalLcsClusterNodeId() {
		return _originalLcsClusterNodeId;
	}

	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (!_setOriginalType) {
			_setOriginalType = true;

			_originalType = _type;
		}

		_type = type;
	}

	public int getOriginalType() {
		return _originalType;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LCSNotificationAuditEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LCSNotificationAuditEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LCSNotificationAuditEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LCSNotificationAuditEntryImpl lcsNotificationAuditEntryImpl = new LCSNotificationAuditEntryImpl();

		lcsNotificationAuditEntryImpl.setLcsNotificationAuditEntryId(getLcsNotificationAuditEntryId());
		lcsNotificationAuditEntryImpl.setUserId(getUserId());
		lcsNotificationAuditEntryImpl.setCreateDate(getCreateDate());
		lcsNotificationAuditEntryImpl.setLcsClusterNodeId(getLcsClusterNodeId());
		lcsNotificationAuditEntryImpl.setType(getType());

		lcsNotificationAuditEntryImpl.resetOriginalValues();

		return lcsNotificationAuditEntryImpl;
	}

	@Override
	public int compareTo(LCSNotificationAuditEntry lcsNotificationAuditEntry) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				lcsNotificationAuditEntry.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		if (getLcsClusterNodeId() < lcsNotificationAuditEntry.getLcsClusterNodeId()) {
			value = -1;
		}
		else if (getLcsClusterNodeId() > lcsNotificationAuditEntry.getLcsClusterNodeId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LCSNotificationAuditEntry)) {
			return false;
		}

		LCSNotificationAuditEntry lcsNotificationAuditEntry = (LCSNotificationAuditEntry)obj;

		long primaryKey = lcsNotificationAuditEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LCSNotificationAuditEntryModelImpl lcsNotificationAuditEntryModelImpl = this;

		lcsNotificationAuditEntryModelImpl._originalUserId = lcsNotificationAuditEntryModelImpl._userId;

		lcsNotificationAuditEntryModelImpl._setOriginalUserId = false;

		lcsNotificationAuditEntryModelImpl._originalLcsClusterNodeId = lcsNotificationAuditEntryModelImpl._lcsClusterNodeId;

		lcsNotificationAuditEntryModelImpl._setOriginalLcsClusterNodeId = false;

		lcsNotificationAuditEntryModelImpl._originalType = lcsNotificationAuditEntryModelImpl._type;

		lcsNotificationAuditEntryModelImpl._setOriginalType = false;

		lcsNotificationAuditEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LCSNotificationAuditEntry> toCacheModel() {
		LCSNotificationAuditEntryCacheModel lcsNotificationAuditEntryCacheModel = new LCSNotificationAuditEntryCacheModel();

		lcsNotificationAuditEntryCacheModel.lcsNotificationAuditEntryId = getLcsNotificationAuditEntryId();

		lcsNotificationAuditEntryCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			lcsNotificationAuditEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			lcsNotificationAuditEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		lcsNotificationAuditEntryCacheModel.lcsClusterNodeId = getLcsClusterNodeId();

		lcsNotificationAuditEntryCacheModel.type = getType();

		return lcsNotificationAuditEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{lcsNotificationAuditEntryId=");
		sb.append(getLcsNotificationAuditEntryId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", lcsClusterNodeId=");
		sb.append(getLcsClusterNodeId());
		sb.append(", type=");
		sb.append(getType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.osb.lcs.model.LCSNotificationAuditEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>lcsNotificationAuditEntryId</column-name><column-value><![CDATA[");
		sb.append(getLcsNotificationAuditEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lcsClusterNodeId</column-name><column-value><![CDATA[");
		sb.append(getLcsClusterNodeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LCSNotificationAuditEntry.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LCSNotificationAuditEntry.class
		};
	private long _lcsNotificationAuditEntryId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _createDate;
	private long _lcsClusterNodeId;
	private long _originalLcsClusterNodeId;
	private boolean _setOriginalLcsClusterNodeId;
	private int _type;
	private int _originalType;
	private boolean _setOriginalType;
	private long _columnBitmask;
	private LCSNotificationAuditEntry _escapedModel;
}