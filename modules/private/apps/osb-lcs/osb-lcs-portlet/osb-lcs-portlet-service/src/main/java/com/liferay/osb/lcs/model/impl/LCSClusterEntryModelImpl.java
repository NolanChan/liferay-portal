/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osb.lcs.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.osb.lcs.model.LCSClusterEntry;
import com.liferay.osb.lcs.model.LCSClusterEntryModel;
import com.liferay.osb.lcs.model.LCSClusterEntrySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LCSClusterEntry service. Represents a row in the &quot;OSBLCS_LCSClusterEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LCSClusterEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LCSClusterEntryImpl}.
 * </p>
 *
 * @author Igor Beslic
 * @see LCSClusterEntryImpl
 * @see LCSClusterEntry
 * @see LCSClusterEntryModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LCSClusterEntryModelImpl extends BaseModelImpl<LCSClusterEntry>
	implements LCSClusterEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a l c s cluster entry model instance should use the {@link LCSClusterEntry} interface instead.
	 */
	public static final String TABLE_NAME = "OSBLCS_LCSClusterEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "lcsClusterEntryId", Types.BIGINT },
			{ "lcsProjectId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "elastic", Types.BOOLEAN },
			{ "highPageLoadTime", Types.INTEGER },
			{ "location", Types.VARCHAR },
			{ "mediumPageLoadTime", Types.INTEGER },
			{ "subscriptionType", Types.VARCHAR },
			{ "type_", Types.INTEGER },
			{ "archived", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("lcsClusterEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lcsProjectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("elastic", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("highPageLoadTime", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mediumPageLoadTime", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("subscriptionType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("archived", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table OSBLCS_LCSClusterEntry (lcsClusterEntryId LONG not null primary key,lcsProjectId LONG,name VARCHAR(75) null,description VARCHAR(75) null,elastic BOOLEAN,highPageLoadTime INTEGER,location VARCHAR(75) null,mediumPageLoadTime INTEGER,subscriptionType VARCHAR(75) null,type_ INTEGER,archived BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table OSBLCS_LCSClusterEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY lcsClusterEntry.lcsClusterEntryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OSBLCS_LCSClusterEntry.lcsClusterEntryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.osb.lcs.model.LCSClusterEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.osb.lcs.model.LCSClusterEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.osb.lcs.model.LCSClusterEntry"),
			true);
	public static final long ARCHIVED_COLUMN_BITMASK = 1L;
	public static final long LCSPROJECTID_COLUMN_BITMASK = 2L;
	public static final long NAME_COLUMN_BITMASK = 4L;
	public static final long SUBSCRIPTIONTYPE_COLUMN_BITMASK = 8L;
	public static final long LCSCLUSTERENTRYID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LCSClusterEntry toModel(LCSClusterEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LCSClusterEntry model = new LCSClusterEntryImpl();

		model.setLcsClusterEntryId(soapModel.getLcsClusterEntryId());
		model.setLcsProjectId(soapModel.getLcsProjectId());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setElastic(soapModel.getElastic());
		model.setHighPageLoadTime(soapModel.getHighPageLoadTime());
		model.setLocation(soapModel.getLocation());
		model.setMediumPageLoadTime(soapModel.getMediumPageLoadTime());
		model.setSubscriptionType(soapModel.getSubscriptionType());
		model.setType(soapModel.getType());
		model.setArchived(soapModel.getArchived());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LCSClusterEntry> toModels(
		LCSClusterEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LCSClusterEntry> models = new ArrayList<LCSClusterEntry>(soapModels.length);

		for (LCSClusterEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.osb.lcs.model.LCSClusterEntry"));

	public LCSClusterEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lcsClusterEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLcsClusterEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lcsClusterEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LCSClusterEntry.class;
	}

	@Override
	public String getModelClassName() {
		return LCSClusterEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("lcsClusterEntryId", getLcsClusterEntryId());
		attributes.put("lcsProjectId", getLcsProjectId());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("elastic", getElastic());
		attributes.put("highPageLoadTime", getHighPageLoadTime());
		attributes.put("location", getLocation());
		attributes.put("mediumPageLoadTime", getMediumPageLoadTime());
		attributes.put("subscriptionType", getSubscriptionType());
		attributes.put("type", getType());
		attributes.put("archived", getArchived());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long lcsClusterEntryId = (Long)attributes.get("lcsClusterEntryId");

		if (lcsClusterEntryId != null) {
			setLcsClusterEntryId(lcsClusterEntryId);
		}

		Long lcsProjectId = (Long)attributes.get("lcsProjectId");

		if (lcsProjectId != null) {
			setLcsProjectId(lcsProjectId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Boolean elastic = (Boolean)attributes.get("elastic");

		if (elastic != null) {
			setElastic(elastic);
		}

		Integer highPageLoadTime = (Integer)attributes.get("highPageLoadTime");

		if (highPageLoadTime != null) {
			setHighPageLoadTime(highPageLoadTime);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}

		Integer mediumPageLoadTime = (Integer)attributes.get(
				"mediumPageLoadTime");

		if (mediumPageLoadTime != null) {
			setMediumPageLoadTime(mediumPageLoadTime);
		}

		String subscriptionType = (String)attributes.get("subscriptionType");

		if (subscriptionType != null) {
			setSubscriptionType(subscriptionType);
		}

		Integer type = (Integer)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		Boolean archived = (Boolean)attributes.get("archived");

		if (archived != null) {
			setArchived(archived);
		}
	}

	@JSON
	@Override
	public long getLcsClusterEntryId() {
		return _lcsClusterEntryId;
	}

	@Override
	public void setLcsClusterEntryId(long lcsClusterEntryId) {
		_lcsClusterEntryId = lcsClusterEntryId;
	}

	@JSON
	@Override
	public long getLcsProjectId() {
		return _lcsProjectId;
	}

	@Override
	public void setLcsProjectId(long lcsProjectId) {
		_columnBitmask |= LCSPROJECTID_COLUMN_BITMASK;

		if (!_setOriginalLcsProjectId) {
			_setOriginalLcsProjectId = true;

			_originalLcsProjectId = _lcsProjectId;
		}

		_lcsProjectId = lcsProjectId;
	}

	public long getOriginalLcsProjectId() {
		return _originalLcsProjectId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public boolean getElastic() {
		return _elastic;
	}

	@JSON
	@Override
	public boolean isElastic() {
		return _elastic;
	}

	@Override
	public void setElastic(boolean elastic) {
		_elastic = elastic;
	}

	@JSON
	@Override
	public int getHighPageLoadTime() {
		return _highPageLoadTime;
	}

	@Override
	public void setHighPageLoadTime(int highPageLoadTime) {
		_highPageLoadTime = highPageLoadTime;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@JSON
	@Override
	public int getMediumPageLoadTime() {
		return _mediumPageLoadTime;
	}

	@Override
	public void setMediumPageLoadTime(int mediumPageLoadTime) {
		_mediumPageLoadTime = mediumPageLoadTime;
	}

	@JSON
	@Override
	public String getSubscriptionType() {
		if (_subscriptionType == null) {
			return StringPool.BLANK;
		}
		else {
			return _subscriptionType;
		}
	}

	@Override
	public void setSubscriptionType(String subscriptionType) {
		_columnBitmask |= SUBSCRIPTIONTYPE_COLUMN_BITMASK;

		if (_originalSubscriptionType == null) {
			_originalSubscriptionType = _subscriptionType;
		}

		_subscriptionType = subscriptionType;
	}

	public String getOriginalSubscriptionType() {
		return GetterUtil.getString(_originalSubscriptionType);
	}

	@JSON
	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		_type = type;
	}

	@JSON
	@Override
	public boolean getArchived() {
		return _archived;
	}

	@JSON
	@Override
	public boolean isArchived() {
		return _archived;
	}

	@Override
	public void setArchived(boolean archived) {
		_columnBitmask |= ARCHIVED_COLUMN_BITMASK;

		if (!_setOriginalArchived) {
			_setOriginalArchived = true;

			_originalArchived = _archived;
		}

		_archived = archived;
	}

	public boolean getOriginalArchived() {
		return _originalArchived;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LCSClusterEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LCSClusterEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LCSClusterEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LCSClusterEntryImpl lcsClusterEntryImpl = new LCSClusterEntryImpl();

		lcsClusterEntryImpl.setLcsClusterEntryId(getLcsClusterEntryId());
		lcsClusterEntryImpl.setLcsProjectId(getLcsProjectId());
		lcsClusterEntryImpl.setName(getName());
		lcsClusterEntryImpl.setDescription(getDescription());
		lcsClusterEntryImpl.setElastic(getElastic());
		lcsClusterEntryImpl.setHighPageLoadTime(getHighPageLoadTime());
		lcsClusterEntryImpl.setLocation(getLocation());
		lcsClusterEntryImpl.setMediumPageLoadTime(getMediumPageLoadTime());
		lcsClusterEntryImpl.setSubscriptionType(getSubscriptionType());
		lcsClusterEntryImpl.setType(getType());
		lcsClusterEntryImpl.setArchived(getArchived());

		lcsClusterEntryImpl.resetOriginalValues();

		return lcsClusterEntryImpl;
	}

	@Override
	public int compareTo(LCSClusterEntry lcsClusterEntry) {
		long primaryKey = lcsClusterEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LCSClusterEntry)) {
			return false;
		}

		LCSClusterEntry lcsClusterEntry = (LCSClusterEntry)obj;

		long primaryKey = lcsClusterEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LCSClusterEntryModelImpl lcsClusterEntryModelImpl = this;

		lcsClusterEntryModelImpl._originalLcsProjectId = lcsClusterEntryModelImpl._lcsProjectId;

		lcsClusterEntryModelImpl._setOriginalLcsProjectId = false;

		lcsClusterEntryModelImpl._originalName = lcsClusterEntryModelImpl._name;

		lcsClusterEntryModelImpl._originalSubscriptionType = lcsClusterEntryModelImpl._subscriptionType;

		lcsClusterEntryModelImpl._originalArchived = lcsClusterEntryModelImpl._archived;

		lcsClusterEntryModelImpl._setOriginalArchived = false;

		lcsClusterEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LCSClusterEntry> toCacheModel() {
		LCSClusterEntryCacheModel lcsClusterEntryCacheModel = new LCSClusterEntryCacheModel();

		lcsClusterEntryCacheModel.lcsClusterEntryId = getLcsClusterEntryId();

		lcsClusterEntryCacheModel.lcsProjectId = getLcsProjectId();

		lcsClusterEntryCacheModel.name = getName();

		String name = lcsClusterEntryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			lcsClusterEntryCacheModel.name = null;
		}

		lcsClusterEntryCacheModel.description = getDescription();

		String description = lcsClusterEntryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			lcsClusterEntryCacheModel.description = null;
		}

		lcsClusterEntryCacheModel.elastic = getElastic();

		lcsClusterEntryCacheModel.highPageLoadTime = getHighPageLoadTime();

		lcsClusterEntryCacheModel.location = getLocation();

		String location = lcsClusterEntryCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			lcsClusterEntryCacheModel.location = null;
		}

		lcsClusterEntryCacheModel.mediumPageLoadTime = getMediumPageLoadTime();

		lcsClusterEntryCacheModel.subscriptionType = getSubscriptionType();

		String subscriptionType = lcsClusterEntryCacheModel.subscriptionType;

		if ((subscriptionType != null) && (subscriptionType.length() == 0)) {
			lcsClusterEntryCacheModel.subscriptionType = null;
		}

		lcsClusterEntryCacheModel.type = getType();

		lcsClusterEntryCacheModel.archived = getArchived();

		return lcsClusterEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{lcsClusterEntryId=");
		sb.append(getLcsClusterEntryId());
		sb.append(", lcsProjectId=");
		sb.append(getLcsProjectId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", elastic=");
		sb.append(getElastic());
		sb.append(", highPageLoadTime=");
		sb.append(getHighPageLoadTime());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append(", mediumPageLoadTime=");
		sb.append(getMediumPageLoadTime());
		sb.append(", subscriptionType=");
		sb.append(getSubscriptionType());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", archived=");
		sb.append(getArchived());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.liferay.osb.lcs.model.LCSClusterEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>lcsClusterEntryId</column-name><column-value><![CDATA[");
		sb.append(getLcsClusterEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lcsProjectId</column-name><column-value><![CDATA[");
		sb.append(getLcsProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>elastic</column-name><column-value><![CDATA[");
		sb.append(getElastic());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>highPageLoadTime</column-name><column-value><![CDATA[");
		sb.append(getHighPageLoadTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mediumPageLoadTime</column-name><column-value><![CDATA[");
		sb.append(getMediumPageLoadTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subscriptionType</column-name><column-value><![CDATA[");
		sb.append(getSubscriptionType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>archived</column-name><column-value><![CDATA[");
		sb.append(getArchived());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LCSClusterEntry.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LCSClusterEntry.class
		};
	private long _lcsClusterEntryId;
	private long _lcsProjectId;
	private long _originalLcsProjectId;
	private boolean _setOriginalLcsProjectId;
	private String _name;
	private String _originalName;
	private String _description;
	private boolean _elastic;
	private int _highPageLoadTime;
	private String _location;
	private int _mediumPageLoadTime;
	private String _subscriptionType;
	private String _originalSubscriptionType;
	private int _type;
	private boolean _archived;
	private boolean _originalArchived;
	private boolean _setOriginalArchived;
	private long _columnBitmask;
	private LCSClusterEntry _escapedModel;
}