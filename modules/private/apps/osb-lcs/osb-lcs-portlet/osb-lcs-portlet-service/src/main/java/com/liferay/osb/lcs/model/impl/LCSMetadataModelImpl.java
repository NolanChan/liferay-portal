/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osb.lcs.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.osb.lcs.model.LCSMetadata;
import com.liferay.osb.lcs.model.LCSMetadataModel;
import com.liferay.osb.lcs.model.LCSMetadataSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LCSMetadata service. Represents a row in the &quot;OSBLCS_LCSMetadata&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LCSMetadataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LCSMetadataImpl}.
 * </p>
 *
 * @author Igor Beslic
 * @see LCSMetadataImpl
 * @see LCSMetadata
 * @see LCSMetadataModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LCSMetadataModelImpl extends BaseModelImpl<LCSMetadata>
	implements LCSMetadataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a l c s metadata model instance should use the {@link LCSMetadata} interface instead.
	 */
	public static final String TABLE_NAME = "OSBLCS_LCSMetadata";
	public static final Object[][] TABLE_COLUMNS = {
			{ "lcsMetadataId", Types.BIGINT },
			{ "availabilityIndex", Types.BIGINT },
			{ "buildNumber", Types.INTEGER },
			{ "gitTag", Types.VARCHAR },
			{ "portalEdition", Types.VARCHAR },
			{ "supportedLCSPortlet", Types.INTEGER },
			{ "supportedPatchingTool", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("lcsMetadataId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("availabilityIndex", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("buildNumber", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("gitTag", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("portalEdition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("supportedLCSPortlet", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("supportedPatchingTool", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table OSBLCS_LCSMetadata (lcsMetadataId LONG not null primary key,availabilityIndex LONG,buildNumber INTEGER,gitTag VARCHAR(75) null,portalEdition VARCHAR(75) null,supportedLCSPortlet INTEGER,supportedPatchingTool INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table OSBLCS_LCSMetadata";
	public static final String ORDER_BY_JPQL = " ORDER BY lcsMetadata.buildNumber DESC, lcsMetadata.gitTag DESC";
	public static final String ORDER_BY_SQL = " ORDER BY OSBLCS_LCSMetadata.buildNumber DESC, OSBLCS_LCSMetadata.gitTag DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.osb.lcs.model.LCSMetadata"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.osb.lcs.model.LCSMetadata"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.osb.lcs.model.LCSMetadata"),
			true);
	public static final long BUILDNUMBER_COLUMN_BITMASK = 1L;
	public static final long GITTAG_COLUMN_BITMASK = 2L;
	public static final long PORTALEDITION_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LCSMetadata toModel(LCSMetadataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LCSMetadata model = new LCSMetadataImpl();

		model.setLcsMetadataId(soapModel.getLcsMetadataId());
		model.setAvailabilityIndex(soapModel.getAvailabilityIndex());
		model.setBuildNumber(soapModel.getBuildNumber());
		model.setGitTag(soapModel.getGitTag());
		model.setPortalEdition(soapModel.getPortalEdition());
		model.setSupportedLCSPortlet(soapModel.getSupportedLCSPortlet());
		model.setSupportedPatchingTool(soapModel.getSupportedPatchingTool());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LCSMetadata> toModels(LCSMetadataSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LCSMetadata> models = new ArrayList<LCSMetadata>(soapModels.length);

		for (LCSMetadataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.osb.lcs.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.osb.lcs.model.LCSMetadata"));

	public LCSMetadataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lcsMetadataId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLcsMetadataId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lcsMetadataId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LCSMetadata.class;
	}

	@Override
	public String getModelClassName() {
		return LCSMetadata.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("lcsMetadataId", getLcsMetadataId());
		attributes.put("availabilityIndex", getAvailabilityIndex());
		attributes.put("buildNumber", getBuildNumber());
		attributes.put("gitTag", getGitTag());
		attributes.put("portalEdition", getPortalEdition());
		attributes.put("supportedLCSPortlet", getSupportedLCSPortlet());
		attributes.put("supportedPatchingTool", getSupportedPatchingTool());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long lcsMetadataId = (Long)attributes.get("lcsMetadataId");

		if (lcsMetadataId != null) {
			setLcsMetadataId(lcsMetadataId);
		}

		Long availabilityIndex = (Long)attributes.get("availabilityIndex");

		if (availabilityIndex != null) {
			setAvailabilityIndex(availabilityIndex);
		}

		Integer buildNumber = (Integer)attributes.get("buildNumber");

		if (buildNumber != null) {
			setBuildNumber(buildNumber);
		}

		String gitTag = (String)attributes.get("gitTag");

		if (gitTag != null) {
			setGitTag(gitTag);
		}

		String portalEdition = (String)attributes.get("portalEdition");

		if (portalEdition != null) {
			setPortalEdition(portalEdition);
		}

		Integer supportedLCSPortlet = (Integer)attributes.get(
				"supportedLCSPortlet");

		if (supportedLCSPortlet != null) {
			setSupportedLCSPortlet(supportedLCSPortlet);
		}

		Integer supportedPatchingTool = (Integer)attributes.get(
				"supportedPatchingTool");

		if (supportedPatchingTool != null) {
			setSupportedPatchingTool(supportedPatchingTool);
		}
	}

	@JSON
	@Override
	public long getLcsMetadataId() {
		return _lcsMetadataId;
	}

	@Override
	public void setLcsMetadataId(long lcsMetadataId) {
		_lcsMetadataId = lcsMetadataId;
	}

	@JSON
	@Override
	public long getAvailabilityIndex() {
		return _availabilityIndex;
	}

	@Override
	public void setAvailabilityIndex(long availabilityIndex) {
		_availabilityIndex = availabilityIndex;
	}

	@JSON
	@Override
	public int getBuildNumber() {
		return _buildNumber;
	}

	@Override
	public void setBuildNumber(int buildNumber) {
		_columnBitmask = -1L;

		if (!_setOriginalBuildNumber) {
			_setOriginalBuildNumber = true;

			_originalBuildNumber = _buildNumber;
		}

		_buildNumber = buildNumber;
	}

	public int getOriginalBuildNumber() {
		return _originalBuildNumber;
	}

	@JSON
	@Override
	public String getGitTag() {
		if (_gitTag == null) {
			return StringPool.BLANK;
		}
		else {
			return _gitTag;
		}
	}

	@Override
	public void setGitTag(String gitTag) {
		_columnBitmask = -1L;

		if (_originalGitTag == null) {
			_originalGitTag = _gitTag;
		}

		_gitTag = gitTag;
	}

	public String getOriginalGitTag() {
		return GetterUtil.getString(_originalGitTag);
	}

	@JSON
	@Override
	public String getPortalEdition() {
		if (_portalEdition == null) {
			return StringPool.BLANK;
		}
		else {
			return _portalEdition;
		}
	}

	@Override
	public void setPortalEdition(String portalEdition) {
		_columnBitmask |= PORTALEDITION_COLUMN_BITMASK;

		if (_originalPortalEdition == null) {
			_originalPortalEdition = _portalEdition;
		}

		_portalEdition = portalEdition;
	}

	public String getOriginalPortalEdition() {
		return GetterUtil.getString(_originalPortalEdition);
	}

	@JSON
	@Override
	public int getSupportedLCSPortlet() {
		return _supportedLCSPortlet;
	}

	@Override
	public void setSupportedLCSPortlet(int supportedLCSPortlet) {
		_supportedLCSPortlet = supportedLCSPortlet;
	}

	@JSON
	@Override
	public int getSupportedPatchingTool() {
		return _supportedPatchingTool;
	}

	@Override
	public void setSupportedPatchingTool(int supportedPatchingTool) {
		_supportedPatchingTool = supportedPatchingTool;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LCSMetadata.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LCSMetadata toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LCSMetadata)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LCSMetadataImpl lcsMetadataImpl = new LCSMetadataImpl();

		lcsMetadataImpl.setLcsMetadataId(getLcsMetadataId());
		lcsMetadataImpl.setAvailabilityIndex(getAvailabilityIndex());
		lcsMetadataImpl.setBuildNumber(getBuildNumber());
		lcsMetadataImpl.setGitTag(getGitTag());
		lcsMetadataImpl.setPortalEdition(getPortalEdition());
		lcsMetadataImpl.setSupportedLCSPortlet(getSupportedLCSPortlet());
		lcsMetadataImpl.setSupportedPatchingTool(getSupportedPatchingTool());

		lcsMetadataImpl.resetOriginalValues();

		return lcsMetadataImpl;
	}

	@Override
	public int compareTo(LCSMetadata lcsMetadata) {
		int value = 0;

		if (getBuildNumber() < lcsMetadata.getBuildNumber()) {
			value = -1;
		}
		else if (getBuildNumber() > lcsMetadata.getBuildNumber()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = getGitTag().compareTo(lcsMetadata.getGitTag());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LCSMetadata)) {
			return false;
		}

		LCSMetadata lcsMetadata = (LCSMetadata)obj;

		long primaryKey = lcsMetadata.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LCSMetadataModelImpl lcsMetadataModelImpl = this;

		lcsMetadataModelImpl._originalBuildNumber = lcsMetadataModelImpl._buildNumber;

		lcsMetadataModelImpl._setOriginalBuildNumber = false;

		lcsMetadataModelImpl._originalGitTag = lcsMetadataModelImpl._gitTag;

		lcsMetadataModelImpl._originalPortalEdition = lcsMetadataModelImpl._portalEdition;

		lcsMetadataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LCSMetadata> toCacheModel() {
		LCSMetadataCacheModel lcsMetadataCacheModel = new LCSMetadataCacheModel();

		lcsMetadataCacheModel.lcsMetadataId = getLcsMetadataId();

		lcsMetadataCacheModel.availabilityIndex = getAvailabilityIndex();

		lcsMetadataCacheModel.buildNumber = getBuildNumber();

		lcsMetadataCacheModel.gitTag = getGitTag();

		String gitTag = lcsMetadataCacheModel.gitTag;

		if ((gitTag != null) && (gitTag.length() == 0)) {
			lcsMetadataCacheModel.gitTag = null;
		}

		lcsMetadataCacheModel.portalEdition = getPortalEdition();

		String portalEdition = lcsMetadataCacheModel.portalEdition;

		if ((portalEdition != null) && (portalEdition.length() == 0)) {
			lcsMetadataCacheModel.portalEdition = null;
		}

		lcsMetadataCacheModel.supportedLCSPortlet = getSupportedLCSPortlet();

		lcsMetadataCacheModel.supportedPatchingTool = getSupportedPatchingTool();

		return lcsMetadataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{lcsMetadataId=");
		sb.append(getLcsMetadataId());
		sb.append(", availabilityIndex=");
		sb.append(getAvailabilityIndex());
		sb.append(", buildNumber=");
		sb.append(getBuildNumber());
		sb.append(", gitTag=");
		sb.append(getGitTag());
		sb.append(", portalEdition=");
		sb.append(getPortalEdition());
		sb.append(", supportedLCSPortlet=");
		sb.append(getSupportedLCSPortlet());
		sb.append(", supportedPatchingTool=");
		sb.append(getSupportedPatchingTool());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.osb.lcs.model.LCSMetadata");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>lcsMetadataId</column-name><column-value><![CDATA[");
		sb.append(getLcsMetadataId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>availabilityIndex</column-name><column-value><![CDATA[");
		sb.append(getAvailabilityIndex());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>buildNumber</column-name><column-value><![CDATA[");
		sb.append(getBuildNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gitTag</column-name><column-value><![CDATA[");
		sb.append(getGitTag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portalEdition</column-name><column-value><![CDATA[");
		sb.append(getPortalEdition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>supportedLCSPortlet</column-name><column-value><![CDATA[");
		sb.append(getSupportedLCSPortlet());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>supportedPatchingTool</column-name><column-value><![CDATA[");
		sb.append(getSupportedPatchingTool());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LCSMetadata.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LCSMetadata.class
		};
	private long _lcsMetadataId;
	private long _availabilityIndex;
	private int _buildNumber;
	private int _originalBuildNumber;
	private boolean _setOriginalBuildNumber;
	private String _gitTag;
	private String _originalGitTag;
	private String _portalEdition;
	private String _originalPortalEdition;
	private int _supportedLCSPortlet;
	private int _supportedPatchingTool;
	private long _columnBitmask;
	private LCSMetadata _escapedModel;
}